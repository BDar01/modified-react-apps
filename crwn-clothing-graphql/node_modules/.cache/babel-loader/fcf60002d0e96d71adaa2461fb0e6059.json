{"ast":null,"code":"import { maybe } from \"../globals/index.js\";\nvar isReactNative = maybe(function () {\n  return navigator.product;\n}) == \"ReactNative\";\nexport var canUseWeakMap = typeof WeakMap === \"function\" && !(isReactNative && !global.HermesInternal);\nexport var canUseWeakSet = typeof WeakSet === \"function\";\nexport var canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nexport var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nexport var canUseDOM = typeof maybe(function () {\n  return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM = // Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\nmaybe(function () {\n  return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false; // Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\n\nexport var canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,qBAAtB;AAEA,IAAMC,aAAa,GAAGD,KAAK,CAAC;AAAM,kBAAS,CAACE,OAAV;AAAiB,CAAxB,CAAL,IAAkC,aAAxD;AAEA,OAAO,IAAMC,aAAa,GACxB,OAAOC,OAAP,KAAmB,UAAnB,IACA,EAAEH,aAAa,IAAI,CAAEI,MAAc,CAACC,cAApC,CAFK;AAIP,OAAO,IAAMC,aAAa,GAAG,OAAOC,OAAP,KAAmB,UAAzC;AAEP,OAAO,IAAMC,YAAY,GACvB,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,GAAd,KAAsB,UADjD;AAGP,OAAO,IAAMC,yBAAyB,GAAGH,YAAY,IAAIC,MAAM,CAACG,aAAzD;AAEP,OAAO,IAAMC,SAAS,GACpB,OAAOd,KAAK,CAAC;AAAM,eAAM,CAACe,QAAP,CAAgBC,aAAhB;AAA6B,CAApC,CAAZ,KAAsD,UADjD;AAGP,IAAMC,UAAU,GACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,KAAK,CAAC;AAAM,kBAAS,CAACkB,SAAV,CAAoBC,OAApB,CAA4B,OAA5B,KAAwC,CAAxC;AAAyC,CAAhD,CAAL,IAA0D,KAT5D,C,CAWA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,kBAAkB,GAAG,CAACN,SAAS,IAAIb,aAAd,KAAgC,CAACgB,UAA5D","names":["maybe","isReactNative","product","canUseWeakMap","WeakMap","global","HermesInternal","canUseWeakSet","WeakSet","canUseSymbol","Symbol","for","canUseAsyncIteratorSymbol","asyncIterator","canUseDOM","document","createElement","usingJSDOM","userAgent","indexOf","canUseLayoutEffect"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/common/canUse.ts"],"sourcesContent":["import { maybe } from \"../globals/index.js\";\n\nconst isReactNative = maybe(() => navigator.product) == \"ReactNative\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === \"function\" &&\n  !(isReactNative && !(global as any).HermesInternal);\n\nexport const canUseWeakSet = typeof WeakSet === \"function\";\n\nexport const canUseSymbol =\n  typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;\n"]},"metadata":{},"sourceType":"module"}