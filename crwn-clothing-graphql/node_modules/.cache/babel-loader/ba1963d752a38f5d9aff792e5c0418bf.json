{"ast":null,"code":"import * as React from \"rehackt\";\nvar Ctx;\n\nfunction noop() {}\n\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n\n  return React.useCallback(\n  /**\n   * @returns true if the hook was called during render\n   */\n  function () {\n    var orig = console.error;\n\n    try {\n      console.error = noop;\n      /**\n       * `useContext` can be called conditionally during render, so this is safe.\n       * (Also, during render we would want to throw as a reaction to this anyways, so it\n       * wouldn't even matter if we got the order of hooks mixed up...)\n       *\n       * They cannot however be called outside of Render, and that's what we're testing here.\n       *\n       * Different versions of React have different behaviour on an invalid hook call:\n       *\n       * React 16.8 - 17: throws an error\n       * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n       *\n       * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n       * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n       */\n\n      React[\"useContext\"\n      /* hide this from the linter */\n      ](Ctx);\n      return true;\n    } catch (e) {\n      return false;\n    } finally {\n      console.error = orig;\n    }\n  }, []);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,IAAIC,GAAJ;;AAEA,SAASC,IAAT,GAAa,CAAK;;AAClB,OAAM,SAAUC,cAAV,GAAwB;AAC5B,MAAI,CAACF,GAAL,EAAU;AACR;AACAA,OAAG,GAAGD,KAAK,CAACI,aAAN,CAAoB,IAApB,CAAN;AACD;;AAED,SAAOJ,KAAK,CAACK,WAAN;AACL;;;AAEI;AACF,QAAMC,IAAI,GAAGC,OAAO,CAACC,KAArB;;AACA,QAAI;AACFD,aAAO,CAACC,KAAR,GAAgBN,IAAhB;AAEA;;;;;;;;;;;;;;;;AAeAF,WAAK,CAAC;AAAa;AAAd,OAAL,CAAoDC,GAApD;AACA,aAAO,IAAP;AACD,KApBD,CAoBE,OAAOQ,CAAP,EAAU;AACV,aAAO,KAAP;AACD,KAtBD,SAsBU;AACRF,aAAO,CAACC,KAAR,GAAgBF,IAAhB;AACD;AACF,GA9BI,EA+BL,EA/BK,CAAP;AAiCD","names":["React","Ctx","noop","useRenderGuard","createContext","useCallback","orig","console","error","e"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/internal/useRenderGuard.ts"],"sourcesContent":["import * as React from \"rehackt\";\n\nlet Ctx: React.Context<null>;\n\nfunction noop() {}\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n\n  return React.useCallback(\n    /**\n     * @returns true if the hook was called during render\n     */ () => {\n      const orig = console.error;\n      try {\n        console.error = noop;\n\n        /**\n         * `useContext` can be called conditionally during render, so this is safe.\n         * (Also, during render we would want to throw as a reaction to this anyways, so it\n         * wouldn't even matter if we got the order of hooks mixed up...)\n         *\n         * They cannot however be called outside of Render, and that's what we're testing here.\n         *\n         * Different versions of React have different behaviour on an invalid hook call:\n         *\n         * React 16.8 - 17: throws an error\n         * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n         *\n         * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n         * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n         */\n        React[\"useContext\" /* hide this from the linter */](Ctx);\n        return true;\n      } catch (e) {\n        return false;\n      } finally {\n        console.error = orig;\n      }\n    },\n    []\n  );\n}\n"]},"metadata":{},"sourceType":"module"}