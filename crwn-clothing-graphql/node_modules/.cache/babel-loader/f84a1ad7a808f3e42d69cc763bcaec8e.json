{"ast":null,"code":"var _jsxFileName = \"/media/rk/disk2/React/crwn-clothing-graphql/src/contexts/categories.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { gql, useQuery } from '@apollo/client';\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CategoriesContext = /*#__PURE__*/createContext({\n  categoriesMap: {}\n});\nconst COLLECTIONS = gql`\n  query {\n    collections {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`;\nexport const CategoriesProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [categoriesMap, setCategoriesMap] = useState({});\n  /* useEffect(() => {\n    const getCategoriesMap = async () => {\n      const categoryMap = await getCategoriesAndDocuments();\n      setCategoriesMap(categoryMap);\n    };\n     getCategoriesMap();\n  }, []); */\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(COLLECTIONS);\n  console.log(data);\n  const value = {\n    categoriesMap\n  };\n  return /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CategoriesProvider, \"hGm95LXPX5s3KBJl2k7mbfcjEtI=\", false, function () {\n  return [useQuery];\n});\n\n_c = CategoriesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesProvider\");","map":{"version":3,"sources":["/media/rk/disk2/React/crwn-clothing-graphql/src/contexts/categories.context.jsx"],"names":["gql","useQuery","createContext","useState","useEffect","CategoriesContext","categoriesMap","COLLECTIONS","CategoriesProvider","children","setCategoriesMap","loading","error","data","console","log","value"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC;AAC7CI,EAAAA,aAAa,EAAE;AAD8B,CAAD,CAAvC;AAIP,MAAMC,WAAW,GAAGP,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;AAeA,OAAO,MAAMQ,kBAAkB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClD,QAAM,CAACH,aAAD,EAAgBI,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAGE,QAAM;AAACQ,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBZ,QAAQ,CAACM,WAAD,CAAvC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,QAAMG,KAAK,GAAG;AAAEV,IAAAA;AAAF,GAAd;AACA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEU,KAAnC;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArBM;;GAAMD,kB;UAYoBP,Q;;;KAZpBO,kB","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport { createContext, useState, useEffect } from 'react';\n\nexport const CategoriesContext = createContext({\n  categoriesMap: {},\n});\n\nconst COLLECTIONS = gql`\n  query {\n    collections {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`\n\nexport const CategoriesProvider = ({ children }) => {\n  const [categoriesMap, setCategoriesMap] = useState({});\n\n  /* useEffect(() => {\n    const getCategoriesMap = async () => {\n      const categoryMap = await getCategoriesAndDocuments();\n      setCategoriesMap(categoryMap);\n    };\n\n    getCategoriesMap();\n  }, []); */\n\n  const {loading, error, data} = useQuery(COLLECTIONS);\n  console.log(data);\n\n  const value = { categoriesMap };\n  return (\n    <CategoriesContext.Provider value={value}>\n      {children}\n    </CategoriesContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}