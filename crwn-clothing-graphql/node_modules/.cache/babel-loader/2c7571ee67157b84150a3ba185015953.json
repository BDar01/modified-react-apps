{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition, preventUnhandledRejection } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign,\n    hasOwnProperty = Object.hasOwnProperty;\n\nvar ObservableQuery =\n/** @class */\nfunction (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        queryInfo = _a.queryInfo,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = observer._subscription._observer;\n\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n\n      var first = !_this.observers.size;\n\n      _this.observers.add(observer); // Deliver most recent error or result.\n\n\n      var last = _this.last;\n\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(_this.maskResult(last.result));\n      } // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n\n\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        _this.reobserve().catch(function () {});\n      }\n\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set(); // related classes\n\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager; // active state\n\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n    _this.maskResult = _this.maskResult.bind(_this);\n\n    var _b = queryManager.defaultOptions.watchQuery,\n        _c = _b === void 0 ? {} : _b,\n        _d = _c.fetchPolicy,\n        defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n\n    var _e = options.fetchPolicy,\n        fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n    _f = options.initialFetchPolicy,\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n    initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy: initialFetchPolicy,\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    // The `query` computed property will always reflect the document transformed\n    // by the last run query. `this.options.query` will always reflect the raw\n    // untransformed query to ensure document transforms with runtime conditionals\n    // are run on the original document.\n    get: function () {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    // Computed shorthand for this.options.variables, preserved for\n    // backwards compatibility.\n\n    /**\n     * An object containing the variables that were provided for the query.\n     */\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      // TODO: this code doesnâ€™t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      var observer = {\n        next: function (result) {\n          resolve(result); // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  /** @internal */\n\n\n  ObservableQuery.prototype.resetDiff = function () {\n    this.queryInfo.resetDiff();\n  };\n\n  ObservableQuery.prototype.getCurrentFullResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    } // Use the last result as long as the variables match this.variables.\n\n\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n\n    var _a = this.options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n\n    if ( // These fetch policies should never deliver data from the cache, unless\n    // redelivering a previously delivered result.\n    skipCacheDataFor(fetchPolicy) || // If this.options.query has @client(always: true) fields, we cannot\n    // trust diff.result, since it was read from the cache without running\n    // local resolvers (and it's too late to run resolvers now, since we must\n    // return a result synchronously).\n    this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {// Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      var diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial; // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n\n    return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n  }; // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n\n    var documentInfo = this.queryManager.getDocumentInfo(this.query);\n    var dataMasking = this.queryManager.dataMasking;\n    var query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n    var resultIsDifferent = dataMasking || documentInfo.hasNonreactiveDirective ? !equalByQuery(query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n\n    var reobserveOptions = {\n      // Always disable polling for refetches.\n      pollInterval: 0\n    }; // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(21, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\"\n    });\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId(); // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query; // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    var updatedQuerySet = new Set();\n    var updateQuery = fetchMoreOptions === null || fetchMoreOptions === void 0 ? void 0 : fetchMoreOptions.updateQuery;\n    var isCached = this.options.fetchPolicy !== \"no-cache\";\n\n    if (!isCached) {\n      invariant(updateQuery, 22);\n    }\n\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      if (isCached) {\n        // Performing this cache update inside a cache.batch transaction ensures\n        // any affected cache.watch watchers are notified at most once about any\n        // updates. Most watchers will be using the QueryInfo class, which\n        // responds to notifications by calling reobserveCacheFirst to deliver\n        // fetchMore cache results back to this ObservableQuery.\n        _this.queryManager.cache.batch({\n          update: function (cache) {\n            var updateQuery = fetchMoreOptions.updateQuery;\n\n            if (updateQuery) {\n              cache.updateQuery({\n                query: _this.query,\n                variables: _this.variables,\n                returnPartialData: true,\n                optimistic: false\n              }, function (previous) {\n                return updateQuery(previous, {\n                  fetchMoreResult: fetchMoreResult.data,\n                  variables: combinedOptions.variables\n                });\n              });\n            } else {\n              // If we're using a field policy instead of updateQuery, the only\n              // thing we need to do is write the new data to the cache using\n              // combinedOptions.variables (instead of this.variables, which is\n              // what this.updateQuery uses, because it works by abusing the\n              // original field value, keyed by the original variables).\n              cache.writeQuery({\n                query: combinedOptions.query,\n                variables: combinedOptions.variables,\n                data: fetchMoreResult.data\n              });\n            }\n          },\n          onWatchUpdated: function (watch) {\n            // Record the DocumentNode associated with any watched query whose\n            // data were updated by the cache writes above.\n            updatedQuerySet.add(watch.query);\n          }\n        });\n      } else {\n        // There is a possibility `lastResult` may not be set when\n        // `fetchMore` is called which would cause this to crash. This should\n        // only happen if we haven't previously reported a result. We don't\n        // quite know what the right behavior should be here since this block\n        // of code runs after the fetch result has executed on the network.\n        // We plan to let it crash in the meantime.\n        //\n        // If we get bug reports due to the `data` property access on\n        // undefined, this should give us a real-world scenario that we can\n        // use to test against and determine the right behavior. If we do end\n        // up changing this behavior, this may require, for example, an\n        // adjustment to the types on `updateQuery` since that function\n        // expects that the first argument always contains previous result\n        // data, but not `undefined`.\n        var lastResult = _this.getLast(\"result\");\n\n        var data = updateQuery(lastResult.data, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n\n        _this.reportResult(__assign(__assign({}, lastResult), {\n          data: data\n        }), _this.variables);\n      }\n\n      return _this.maskResult(fetchMoreResult);\n    }).finally(function () {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (isCached && !updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  }; // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        globalThis.__DEV__ !== false && invariant.error(23, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables; // See comment above\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }; // Update options.fetchPolicy according to options.nextFetchPolicy.\n\n\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, // It's possible to use this method to apply options.nextFetchPolicy to\n  // options.fetchPolicy even if options !== this.options, though that happens\n  // most often when the options are temporary, used for only one request and\n  // then thrown away, so nextFetchPolicy may not end up mattering.\n  options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n          fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n          _b = options.initialFetchPolicy,\n          initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n\n      if (fetchPolicy === \"standby\") {// Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  };\n\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n  }; // Turns polling on or off based on this.options.pollInterval.\n\n\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this; // Avoid polling in SSR mode\n\n\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    var _a = this,\n        pollingInfo = _a.pollingInfo,\n        pollInterval = _a.options.pollInterval;\n\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(pollInterval, 24);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n\n    var maybeFetch = function () {\n      var _a, _b;\n\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n          _this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    var poll = function () {\n      var info = _this.pollingInfo;\n\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var error = this.getLastError(); // Preserve this.last.error unless the variables have changed.\n\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n\n    this.isTornDown = false;\n    var useDisposableConcast = // Refetching uses a disposable Concast to allow refetches using different\n    // options/variables, without permanently altering the options of the\n    // original ObservableQuery.\n    newNetworkStatus === NetworkStatus.refetch || // The fetchMore method does not actually call the reobserve method, but,\n    // if it did, it would definitely use a disposable Concast.\n    newNetworkStatus === NetworkStatus.fetchMore || // Polling uses a disposable Concast so the polling options (which force\n    // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n    newNetworkStatus === NetworkStatus.poll; // Save the old variables, since Object.assign may modify them below.\n\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? // Disposable Concast fetches receive a shallow copy of this.options\n    // (merged with newOptions), leaving this.options unmodified.\n    mergedOptions : assign(this.options, mergedOptions); // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling(); // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && // Don't mess with the fetchPolicy if it's currently \"standby\".\n      options.fetchPolicy !== \"standby\" && ( // If we're changing the fetchPolicy anyway, don't try to change it here\n      // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n      options.fetchPolicy === oldFetchPolicy || // A `nextFetchPolicy` function has even higher priority, though,\n      // so in that case `applyNextFetchPolicy` must be called.\n      typeof options.nextFetchPolicy === \"function\")) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n\n    var variables = options.variables && __assign({}, options.variables);\n\n    var _a = this.fetch(options, newNetworkStatus, query),\n        concast = _a.concast,\n        fromLink = _a.fromLink;\n\n    var observer = {\n      next: function (result) {\n        if (equal(_this.variables, variables)) {\n          finishWaitingForOwnResult();\n\n          _this.reportResult(result, variables);\n        }\n      },\n      error: function (error) {\n        if (equal(_this.variables, variables)) {\n          // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n          // However, calling `concast.cancel` can inject another type of error, so we have to\n          // wrap it again here.\n          if (!isApolloError(error)) {\n            error = new ApolloError({\n              networkError: error\n            });\n          }\n\n          finishWaitingForOwnResult();\n\n          _this.reportError(error, variables);\n        }\n      }\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n    return concast;\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return preventUnhandledRejection(this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(this.maskResult));\n  };\n\n  ObservableQuery.prototype.resubscribeAfterError = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n\n\n    var last = this.last;\n    this.resetLastResults();\n    var subscription = this.subscribe.apply(this, args);\n    this.last = last;\n    return subscription;\n  }; // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n\n\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult( // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.reportResult.\n    this.getCurrentFullResult(false), this.variables);\n  };\n\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables); // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", this.maskResult(result));\n    }\n  };\n\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, \"error\", this.last.error = error);\n  };\n\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling(); // stop all active GraphQL subscriptions\n\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n\n  ObservableQuery.prototype.maskResult = function (result) {\n    return result && \"data\" in result ? __assign(__assign({}, result), {\n      data: this.queryManager.maskOperation({\n        document: this.query,\n        data: result.data,\n        fetchPolicy: this.options.fetchPolicy,\n        id: this.queryId\n      })\n    }) : result;\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery }; // Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\n\nfixObservableSubclass(ObservableQuery); // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n      fetchPolicy = _a.fetchPolicy,\n      nextFetchPolicy = _a.nextFetchPolicy;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy: function (currentFetchPolicy, context) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy; // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n\n        if (typeof this.nextFetchPolicy === \"function\") {\n          return this.nextFetchPolicy(currentFetchPolicy, context);\n        } // Otherwise go back to the original this.options.fetchPolicy.\n\n\n        return fetchPolicy;\n      }\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(25, error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(26, missing);\n  }\n}\n\nfunction skipCacheDataFor(fetchPolicy\n/* `undefined` would mean `\"cache-first\"` */\n) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","preventUnhandledRejection","ApolloError","isApolloError","equalByQuery","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","maskResult","reobserve","catch","delete","tearDownQuery","Set","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","subscribeToMore","bind","defaultOptions","watchQuery","_b","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","__assign","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","lastQuery","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","resetDiff","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","globalThis","partialRefetch","logMissingFieldErrors","missing","updateLastResult","getCurrentFullResult","newResult","documentInfo","dataMasking","nonReactiveQuery","resultIsDifferent","hasNonreactiveDirective","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","__DEV__","queryDef","vars","variableDefinitions","some","v","variable","combinedOptions","fetchMoreOptions","transformDocument","originalNetworkStatus","updatedQuerySet","updateQuery","isCached","qid","then","cache","previous","fetchMoreResult","onWatchUpdated","finally","reobserveCacheFirst","startGraphQLSubscription","subscriptionData","subscriptions","setOptions","newOptions","optimistic","mapFn","reason","observable","prototype","newNetworkStatus","ssrMode","pollingInfo","clearTimeout","interval","info","poll","assumeImmutableResults","oldVariables","oldFetchPolicy","mergedOptions","useDisposableConcast","assign","updatePolling","finishWaitingForOwnResult","concast","fetch","fromLink","reportResult","networkError","reobserveAsConcast","promise","args","lastError","reportError","errors","errorResult","hasObservers","removeObserver","stopPolling","forEach","clear","transform","document","id","obsQuery","nextFetchPolicy"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n  preventUnhandledRejection,\n} from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\nimport type { MaybeMasked, Unmasked } from \"../masking/index.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<MaybeMasked<TData>>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  /**\n   * An object containing the variables that were provided for the query.\n   */\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<\n    Observer<ApolloQueryResult<MaybeMasked<TData>>>\n  >();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<MaybeMasked<TData>>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(this.maskResult(last.result));\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    this.subscribeToMore = this.subscribeToMore.bind(this);\n    this.maskResult = this.maskResult.bind(this);\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : (\n        fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesnâ€™t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<MaybeMasked<TData>>> = {\n        next: (result) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  /** @internal */\n  public resetDiff() {\n    this.queryInfo.resetDiff();\n  }\n\n  private getCurrentFullResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  public getCurrentResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<MaybeMasked<TData>> {\n    return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const documentInfo = this.queryManager.getDocumentInfo(this.query);\n    const dataMasking = this.queryManager.dataMasking;\n    const query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n\n    const resultIsDifferent =\n      dataMasking || documentInfo.hasNonreactiveDirective ?\n        !equalByQuery(query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: Unmasked<TData>,\n        options: {\n          fetchMoreResult: Unmasked<TFetchData>;\n          variables: TFetchVars;\n        }\n      ) => Unmasked<TData>;\n    }\n  ): Promise<ApolloQueryResult<MaybeMasked<TFetchData>>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : (\n        {\n          ...this.options,\n          query: this.options.query,\n          ...fetchMoreOptions,\n          variables: {\n            ...this.options.variables,\n            ...fetchMoreOptions.variables,\n          },\n        }\n      )),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery =\n      fetchMoreOptions.query ?\n        this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    const updateQuery = fetchMoreOptions?.updateQuery;\n    const isCached = this.options.fetchPolicy !== \"no-cache\";\n\n    if (!isCached) {\n      invariant(\n        updateQuery,\n        \"You must provide an `updateQuery` function when using `fetchMore` with a `no-cache` fetch policy.\"\n      );\n    }\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        if (isCached) {\n          // Performing this cache update inside a cache.batch transaction ensures\n          // any affected cache.watch watchers are notified at most once about any\n          // updates. Most watchers will be using the QueryInfo class, which\n          // responds to notifications by calling reobserveCacheFirst to deliver\n          // fetchMore cache results back to this ObservableQuery.\n          this.queryManager.cache.batch({\n            update: (cache) => {\n              const { updateQuery } = fetchMoreOptions;\n              if (updateQuery) {\n                cache.updateQuery(\n                  {\n                    query: this.query,\n                    variables: this.variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                  },\n                  (previous) =>\n                    updateQuery(previous! as any, {\n                      fetchMoreResult: fetchMoreResult.data as any,\n                      variables: combinedOptions.variables as TFetchVars,\n                    })\n                );\n              } else {\n                // If we're using a field policy instead of updateQuery, the only\n                // thing we need to do is write the new data to the cache using\n                // combinedOptions.variables (instead of this.variables, which is\n                // what this.updateQuery uses, because it works by abusing the\n                // original field value, keyed by the original variables).\n                cache.writeQuery({\n                  query: combinedOptions.query,\n                  variables: combinedOptions.variables,\n                  data: fetchMoreResult.data as Unmasked<TFetchData>,\n                });\n              }\n            },\n\n            onWatchUpdated: (watch) => {\n              // Record the DocumentNode associated with any watched query whose\n              // data were updated by the cache writes above.\n              updatedQuerySet.add(watch.query);\n            },\n          });\n        } else {\n          // There is a possibility `lastResult` may not be set when\n          // `fetchMore` is called which would cause this to crash. This should\n          // only happen if we haven't previously reported a result. We don't\n          // quite know what the right behavior should be here since this block\n          // of code runs after the fetch result has executed on the network.\n          // We plan to let it crash in the meantime.\n          //\n          // If we get bug reports due to the `data` property access on\n          // undefined, this should give us a real-world scenario that we can\n          // use to test against and determine the right behavior. If we do end\n          // up changing this behavior, this may require, for example, an\n          // adjustment to the types on `updateQuery` since that function\n          // expects that the first argument always contains previous result\n          // data, but not `undefined`.\n          const lastResult = this.getLast(\"result\")!;\n          const data = updateQuery!(lastResult.data as Unmasked<TData>, {\n            fetchMoreResult: fetchMoreResult.data as Unmasked<TFetchData>,\n            variables: combinedOptions.variables as TFetchVars,\n          });\n\n          this.reportResult(\n            { ...lastResult, data: data as TData },\n            this.variables\n          );\n        }\n\n        return this.maskResult(fetchMoreResult);\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (isCached && !updatedQuerySet.has(this.query)) {\n          reobserveCacheFirst(this);\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: Unmasked<TSubscriptionData> }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: Unmasked<TData>,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">\n    ) => Unmasked<TData>\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result! as Unmasked<TData>, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      this.queryId,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (\n          !isNetworkRequestInFlight(this.queryInfo.networkStatus) &&\n          !this.options.skipPollAttempt?.()\n        ) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\" ?\n                  \"no-cache\"\n                : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result:\n        this.queryManager.assumeImmutableResults ?\n          newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options =\n      useDisposableConcast ?\n        // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        (options.fetchPolicy === oldFetchPolicy ||\n          // A `nextFetchPolicy` function has even higher priority, though,\n          // so in that case `applyNextFetchPolicy` must be called.\n          typeof options.nextFetchPolicy === \"function\")\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        if (equal(this.variables, variables)) {\n          finishWaitingForOwnResult();\n          this.reportResult(result, variables);\n        }\n      },\n      error: (error) => {\n        if (equal(this.variables, variables)) {\n          // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n          // However, calling `concast.cancel` can inject another type of error, so we have to\n          // wrap it again here.\n          if (!isApolloError(error)) {\n            error = new ApolloError({ networkError: error });\n          }\n          finishWaitingForOwnResult();\n          this.reportError(error, variables);\n        }\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return preventUnhandledRejection(\n      this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(\n        this.maskResult as TODO\n      )\n    );\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<MaybeMasked<TData>>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    this.resetLastResults();\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentFullResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", this.maskResult(result));\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n\n  private maskResult<T = TData>(\n    result: ApolloQueryResult<T>\n  ): ApolloQueryResult<MaybeMasked<T>> {\n    return result && \"data\" in result ?\n        {\n          ...result,\n          data: this.queryManager.maskOperation({\n            document: this.query,\n            data: result.data,\n            fetchPolicy: this.options.fetchPolicy,\n            id: this.queryId,\n          }),\n        }\n      : result;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(\n        this: WatchQueryOptions<TVars, TData>,\n        currentFetchPolicy: WatchQueryFetchPolicy,\n        context: NextFetchPolicyContext<TData, TVars>\n      ) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof this.nextFetchPolicy === \"function\") {\n          return this.nextFetchPolicy(currentFetchPolicy, context);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n"]},"metadata":{},"sourceType":"module"}