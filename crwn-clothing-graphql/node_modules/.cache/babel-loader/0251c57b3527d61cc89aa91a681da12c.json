{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\n\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = React.useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = React.useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  useIsomorphicLayoutEffect(function () {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  });\n  var execute = React.useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    var client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (error && onError) {\n        onError(error, clientOptions);\n      }\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n\n      if (!error) {\n        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      }\n\n      return response;\n    }).catch(function (error) {\n      var _a;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (onError) {\n        onError(error, clientOptions); // TODO(brian): why are we returning this here???\n\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = React.useCallback(function () {\n    if (ref.current.isMounted) {\n      var result_3 = {\n        called: false,\n        loading: false,\n        client: ref.current.client\n      };\n      Object.assign(ref.current, {\n        mutationId: 0,\n        result: result_3\n      });\n      setResult(result_3);\n    }\n  }, []);\n  React.useEffect(function () {\n    var current = ref.current;\n    current.isMounted = true;\n    return function () {\n      current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"mappings":"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","names":["React","mergeOptions","equal","DocumentType","verifyDocumentType","ApolloError","useApolloClient","useIsomorphicLayoutEffect","useMutation","mutation","options","client","Mutation","useState","called","loading","result","setResult","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","onError","_a","result_1","onCompleted","_b","catch","result_2","reset","result_3","useEffect","__assign"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n\n/**\n *\n *\n * > Refer to the [Mutations](https://www.apollographql.com/docs/react/data/mutations/) section for a more in-depth overview of `useMutation`.\n *\n * @example\n * ```jsx\n * import { gql, useMutation } from '@apollo/client';\n *\n * const ADD_TODO = gql`\n *   mutation AddTodo($type: String!) {\n *     addTodo(type: $type) {\n *       id\n *       type\n *     }\n *   }\n * `;\n *\n * function AddTodo() {\n *   let input;\n *   const [addTodo, { data }] = useMutation(ADD_TODO);\n *\n *   return (\n *     <div>\n *       <form\n *         onSubmit={e => {\n *           e.preventDefault();\n *           addTodo({ variables: { type: input.value } });\n *           input.value = '';\n *         }}\n *       >\n *         <input\n *           ref={node => {\n *             input = node;\n *           }}\n *         />\n *         <button type=\"submit\">Add Todo</button>\n *       </form>\n *     </div>\n *   );\n * }\n * ```\n * @since 3.0.0\n * @param mutation - A GraphQL mutation document parsed into an AST by `gql`.\n * @param options - Options to control how the mutation is executed.\n * @returns A tuple in the form of `[mutate, result]`\n */\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    Object.assign(ref.current, { client, options, mutation });\n  });\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = {\n        called: false,\n        loading: false,\n        client: ref.current.client,\n      };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const current = ref.current;\n    current.isMounted = true;\n\n    return () => {\n      current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"]},"metadata":{},"sourceType":"module"}