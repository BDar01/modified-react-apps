{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\", _useFragment, useApolloClient(options.client))(options);\n}\n\nfunction _useFragment(options) {\n  var client = useApolloClient(options.client);\n  var cache = client.cache;\n\n  var from = options.from,\n      rest = __rest(options, [\"from\"]); // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n\n\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : from === null ? null : cache.identify(from);\n  }, [cache, from]);\n  var stableOptions = useDeepMemo(function () {\n    return __assign(__assign({}, rest), {\n      from: id\n    });\n  }, [rest, id]); // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n\n  var diff = React.useMemo(function () {\n    var fragment = stableOptions.fragment,\n        fragmentName = stableOptions.fragmentName,\n        from = stableOptions.from,\n        _a = stableOptions.optimistic,\n        optimistic = _a === void 0 ? true : _a;\n\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {},\n          complete: false\n        })\n      };\n    }\n\n    var cache = client.cache;\n    var diff = cache.diff(__assign(__assign({}, stableOptions), {\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    }));\n    return {\n      result: diffToResult(__assign(__assign({}, diff), {\n        result: client[\"queryManager\"].maskFragment({\n          fragment: fragment,\n          fragmentName: fragmentName,\n          data: diff.result\n        })\n      }))\n    };\n  }, [client, stableOptions]); // Used for both getSnapshot and getServerSnapshot\n\n  var getSnapshot = React.useCallback(function () {\n    return diff.result;\n  }, [diff]);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = stableOptions.from === null ? null : client.watchFragment(stableOptions).subscribe({\n      next: function (result) {\n        // Since `next` is called async by zen-observable, we want to avoid\n        // unnecessarily rerendering this hook for the initial result\n        // emitted from watchFragment which should be equal to\n        // `diff.result`.\n        if (equal(result, diff.result)) return;\n        diff.result = result; // If we get another update before we've re-rendered, bail out of\n        // the update and try again. This ensures that the relative timing\n        // between useQuery and useFragment stays roughly the same as\n        // fixed in https://github.com/apollographql/apollo-client/pull/11083\n\n        clearTimeout(lastTimeout);\n        lastTimeout = setTimeout(forceUpdate);\n      }\n    });\n    return function () {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [client, stableOptions, diff]), getSnapshot, getSnapshot);\n}\n\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["React","mergeDeepArray","useApolloClient","useSyncExternalStore","useDeepMemo","wrapHook","equal","useFragment","options","_useFragment","client","rest","id","useMemo","from","cache","identify","stableOptions","diff","fragmentName","_a","optimistic","result","diffToResult","complete","__assign","returnPartialData","query","fragment","maskFragment","data","getSnapshot","useCallback","forceUpdate","lastTimeout","subscription","watchFragment","subscribe","next","clearTimeout","setTimeout","unsubscribe","missing","map","error"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nimport type { FragmentType, MaybeMasked } from \"../../masking/index.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string | null;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: MaybeMasked<TData>;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<MaybeMasked<TData>>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    _useFragment,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction _useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const client = useApolloClient(options.client);\n  const { cache } = client;\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  );\n\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {} as TData,\n          complete: false,\n        }),\n      };\n    }\n\n    const { cache } = client;\n    const diff = cache.diff<TData>({\n      ...stableOptions,\n      returnPartialData: true,\n      id: from,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    });\n\n    return {\n      result: diffToResult({\n        ...diff,\n        result: client[\"queryManager\"].maskFragment({\n          fragment,\n          fragmentName,\n          data: diff.result,\n        }),\n      }),\n    };\n  }, [client, stableOptions]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n\n        const subscription =\n          stableOptions.from === null ?\n            null\n          : client.watchFragment(stableOptions).subscribe({\n              next: (result) => {\n                // Since `next` is called async by zen-observable, we want to avoid\n                // unnecessarily rerendering this hook for the initial result\n                // emitted from watchFragment which should be equal to\n                // `diff.result`.\n                if (equal(result, diff.result)) return;\n                diff.result = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate) as any;\n              },\n            });\n        return () => {\n          subscription?.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [client, stableOptions, diff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}