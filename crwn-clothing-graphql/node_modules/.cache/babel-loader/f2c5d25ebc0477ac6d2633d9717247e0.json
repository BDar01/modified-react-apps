{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\n\nexport function useSubscription(subscription, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 61 : 62);\n    }\n\n    if (options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 63 : 64);\n    }\n  }\n\n  var skip = options.skip,\n      fetchPolicy = options.fetchPolicy,\n      errorPolicy = options.errorPolicy,\n      shouldResubscribe = options.shouldResubscribe,\n      context = options.context,\n      extensions = options.extensions,\n      ignoreResults = options.ignoreResults;\n  var variables = useDeepMemo(function () {\n    return options.variables;\n  }, [options.variables]);\n\n  var recreate = function () {\n    return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n  };\n\n  var _a = React.useState(options.skip ? null : recreate),\n      observable = _a[0],\n      setObservable = _a[1];\n\n  var recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(function () {\n    recreateRef.current = recreate;\n  });\n\n  if (skip) {\n    if (observable) {\n      setObservable(observable = null);\n    }\n  } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !equal(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n    setObservable(observable = recreate());\n  }\n\n  var optionsRef = React.useRef(options);\n  React.useEffect(function () {\n    optionsRef.current = options;\n  });\n  var fallbackLoading = !skip && !ignoreResults;\n  var fallbackResult = React.useMemo(function () {\n    return {\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables: variables\n    };\n  }, [fallbackLoading, variables]);\n  var ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(function () {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n  var ret = useSyncExternalStore(React.useCallback(function (update) {\n    if (!observable) {\n      return function () {};\n    }\n\n    var subscriptionStopped = false;\n    var variables = observable.__.variables;\n    var client = observable.__.client;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        if (subscriptionStopped) {\n          return;\n        }\n\n        var result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data,\n          error: toApolloError(fetchResult),\n          variables: variables\n        };\n\n        observable.__.setResult(result);\n\n        if (!ignoreResultsRef.current) update();\n\n        if (result.error) {\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n        } else if (optionsRef.current.onData) {\n          optionsRef.current.onData({\n            client: client,\n            data: result\n          });\n        } else if (optionsRef.current.onSubscriptionData) {\n          optionsRef.current.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n\n        error = error instanceof ApolloError ? error : new ApolloError({\n          protocolErrors: [error]\n        });\n\n        if (!subscriptionStopped) {\n          observable.__.setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: variables\n          });\n\n          if (!ignoreResultsRef.current) update();\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n      },\n      complete: function () {\n        if (!subscriptionStopped) {\n          if (optionsRef.current.onComplete) {\n            optionsRef.current.onComplete();\n          } else if (optionsRef.current.onSubscriptionComplete) {\n            optionsRef.current.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]), function () {\n    return observable && !skip && !ignoreResults ? observable.__.result : fallbackResult;\n  }, function () {\n    return fallbackResult;\n  });\n  var restart = React.useCallback(function () {\n    invariant(!optionsRef.current.skip, 65);\n    setObservable(recreateRef.current());\n  }, [optionsRef, recreateRef]);\n  return React.useMemo(function () {\n    return __assign(__assign({}, ret), {\n      restart: restart\n    });\n  }, [ret, restart]);\n}\n\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n  var options = {\n    query: query,\n    variables: variables,\n    fetchPolicy: fetchPolicy,\n    errorPolicy: errorPolicy,\n    context: context,\n    extensions: extensions\n  };\n\n  var __ = __assign(__assign({}, options), {\n    client: client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables: variables\n    },\n    setResult: function (result) {\n      __.result = result;\n    }\n  });\n\n  var observable = null;\n  return Object.assign(new Observable(function (observer) {\n    // lazily start the subscription when the first observer subscribes\n    // to get around strict mode\n    if (!observable) {\n      observable = client.subscribe(options);\n    }\n\n    var sub = observable.subscribe(observer);\n    return function () {\n      return sub.unsubscribe();\n    };\n  }), {\n    /**\n     * A tracking object to store details about the observable and the latest result of the subscription.\n     */\n    __: __\n  });\n}","map":{"version":3,"mappings":"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","names":["invariant","React","equal","DocumentType","verifyDocumentType","ApolloError","Observable","useApolloClient","useDeepMemo","useSyncExternalStore","toApolloError","useIsomorphicLayoutEffect","useSubscription","subscription","options","Object","create","hasIssuedDeprecationWarningRef","useRef","client","Subscription","current","onSubscriptionData","globalThis","fetchPolicy","errorPolicy","shouldResubscribe","context","extensions","ignoreResults","recreate","_a","observable","setObservable","recreateRef","skip","__","variables","optionsRef","fallbackLoading","loading","error","data","ignoreResultsRef","ret","subscriptionStopped","next","_b","fetchResult","result","update","onError","onData","subscriptionData","protocolErrors","onSubscriptionComplete","setTimeout","fallbackResult","restart","createSubscription","query","observer"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type {\n  ApolloClient,\n  DefaultContext,\n  ErrorPolicy,\n  FetchPolicy,\n  FetchResult,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SubscriptionHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options.onSubscriptionData) {\n      invariant.warn(\n        options.onData ?\n          \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n        : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete ?\n          \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n        : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const {\n    skip,\n    fetchPolicy,\n    errorPolicy,\n    shouldResubscribe,\n    context,\n    extensions,\n    ignoreResults,\n  } = options;\n  const variables = useDeepMemo(() => options.variables, [options.variables]);\n\n  const recreate = () =>\n    createSubscription(\n      client,\n      subscription,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      context,\n      extensions\n    );\n\n  let [observable, setObservable] = React.useState(\n    options.skip ? null : recreate\n  );\n\n  const recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(() => {\n    recreateRef.current = recreate;\n  });\n\n  if (skip) {\n    if (observable) {\n      setObservable((observable = null));\n    }\n  } else if (\n    !observable ||\n    ((client !== observable.__.client ||\n      subscription !== observable.__.query ||\n      fetchPolicy !== observable.__.fetchPolicy ||\n      errorPolicy !== observable.__.errorPolicy ||\n      !equal(variables, observable.__.variables)) &&\n      (typeof shouldResubscribe === \"function\" ?\n        !!shouldResubscribe(options!)\n      : shouldResubscribe) !== false)\n  ) {\n    setObservable((observable = recreate()));\n  }\n\n  const optionsRef = React.useRef(options);\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n\n  const fallbackLoading = !skip && !ignoreResults;\n  const fallbackResult = React.useMemo<SubscriptionResult<TData, TVariables>>(\n    () => ({\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables,\n    }),\n    [fallbackLoading, variables]\n  );\n\n  const ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(() => {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n\n  const ret = useSyncExternalStore<SubscriptionResult<TData, TVariables>>(\n    React.useCallback(\n      (update) => {\n        if (!observable) {\n          return () => {};\n        }\n\n        let subscriptionStopped = false;\n        const variables = observable.__.variables;\n        const client = observable.__.client;\n        const subscription = observable.subscribe({\n          next(fetchResult) {\n            if (subscriptionStopped) {\n              return;\n            }\n\n            const result = {\n              loading: false,\n              // TODO: fetchResult.data can be null but SubscriptionResult.data\n              // expects TData | undefined only\n              data: fetchResult.data!,\n              error: toApolloError(fetchResult),\n              variables,\n            };\n            observable.__.setResult(result);\n            if (!ignoreResultsRef.current) update();\n\n            if (result.error) {\n              optionsRef.current.onError?.(result.error);\n            } else if (optionsRef.current.onData) {\n              optionsRef.current.onData({\n                client,\n                data: result,\n              });\n            } else if (optionsRef.current.onSubscriptionData) {\n              optionsRef.current.onSubscriptionData({\n                client,\n                subscriptionData: result,\n              });\n            }\n          },\n          error(error) {\n            error =\n              error instanceof ApolloError ? error : (\n                new ApolloError({ protocolErrors: [error] })\n              );\n            if (!subscriptionStopped) {\n              observable.__.setResult({\n                loading: false,\n                data: void 0,\n                error,\n                variables,\n              });\n              if (!ignoreResultsRef.current) update();\n              optionsRef.current.onError?.(error);\n            }\n          },\n          complete() {\n            if (!subscriptionStopped) {\n              if (optionsRef.current.onComplete) {\n                optionsRef.current.onComplete();\n              } else if (optionsRef.current.onSubscriptionComplete) {\n                optionsRef.current.onSubscriptionComplete();\n              }\n            }\n          },\n        });\n\n        return () => {\n          // immediately stop receiving subscription values, but do not unsubscribe\n          // until after a short delay in case another useSubscription hook is\n          // reusing the same underlying observable and is about to subscribe\n          subscriptionStopped = true;\n          setTimeout(() => {\n            subscription.unsubscribe();\n          });\n        };\n      },\n      [observable]\n    ),\n    () =>\n      observable && !skip && !ignoreResults ?\n        observable.__.result\n      : fallbackResult,\n    () => fallbackResult\n  );\n\n  const restart = React.useCallback(() => {\n    invariant(\n      !optionsRef.current.skip,\n      \"A subscription that is skipped cannot be restarted.\"\n    );\n    setObservable(recreateRef.current());\n  }, [optionsRef, recreateRef]);\n\n  return React.useMemo(() => ({ ...ret, restart }), [ret, restart]);\n}\n\nfunction createSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<any>,\n  query: TypedDocumentNode<TData, TVariables>,\n  variables: TVariables | undefined,\n  fetchPolicy: FetchPolicy | undefined,\n  errorPolicy: ErrorPolicy | undefined,\n  context: DefaultContext | undefined,\n  extensions: Record<string, any> | undefined\n) {\n  const options = {\n    query,\n    variables,\n    fetchPolicy,\n    errorPolicy,\n    context,\n    extensions,\n  };\n  const __ = {\n    ...options,\n    client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables,\n    } as SubscriptionResult<TData, TVariables>,\n    setResult(result: SubscriptionResult<TData, TVariables>) {\n      __.result = result;\n    },\n  };\n\n  let observable: Observable<FetchResult<MaybeMasked<TData>>> | null = null;\n  return Object.assign(\n    new Observable<FetchResult<MaybeMasked<TData>>>((observer) => {\n      // lazily start the subscription when the first observer subscribes\n      // to get around strict mode\n      if (!observable) {\n        observable = client.subscribe(options);\n      }\n      const sub = observable.subscribe(observer);\n      return () => sub.unsubscribe();\n    }),\n    {\n      /**\n       * A tracking object to store details about the observable and the latest result of the subscription.\n       */\n      __,\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}