{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n} // In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\n\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger =\n/** @class */\nfunction () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = isNonNullObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false)); // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    } // If source (or target) is not an object, let source replace target.\n\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = value.slice(0);\n        } else {\n          value = __assign({\n            __proto__: Object.getPrototypeOf(value)\n          }, value);\n        }\n\n        this.pastCopies.add(value);\n      }\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexport { DeepMerger };","map":{"version":3,"mappings":"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","names":["isNonNullObject","Object","prototype","hasOwnProperty","mergeDeep","sources","mergeDeepArray","target","count","length","merger","DeepMerger","i","merge","defaultReconciler","source","property","reconciler","Set","context","keys","forEach","sourceKey","call","targetValue","result","_this","apply","__spreadArray","shallowCopyForMerge","value","pastCopies","has","Array","isArray","slice","__proto__","getPrototypeOf","add"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/common/mergeDeep.ts"],"sourcesContent":["import { isNonNullObject } from \"./objects.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A\n  : T extends [infer A, infer B] ? A & B\n  : T extends [infer A, infer B, infer C] ? A & B & C\n  : T extends [infer A, infer B, infer C, infer D] ? A & B & C & D\n  : T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E\n  : T extends (infer U)[] ? U\n  : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> = function (\n  target,\n  source,\n  property\n) {\n  return this.merge(target[property], source[property]);\n};\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler as any as ReconcilerFunction<TContextArgs>\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach((sourceKey) => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(\n              target,\n              source,\n              sourceKey,\n              ...context\n            );\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}