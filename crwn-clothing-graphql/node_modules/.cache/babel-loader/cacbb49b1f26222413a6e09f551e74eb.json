{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache;\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n\n  return name;\n} // This parser is mostly used to safety check incoming documents.\n\nexport function parser(document) {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(cacheSizes.parser || 1000\n    /* defaultCacheSizes.parser */\n    );\n  }\n\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 70, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n\n        case \"mutation\":\n          mutations.push(x);\n          break;\n\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 71);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 72, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 73, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = function () {\n  cache = undefined;\n};\n\nif (globalThis.__DEV__ !== false) {\n  registerGlobalCache(\"parser\", function () {\n    return cache ? cache.size : 0;\n  });\n}\n\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 74, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"mappings":"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","names":["invariant","AutoCleanedWeakCache","cacheSizes","registerGlobalCache","DocumentType","cache","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","kind","fragments","queries","mutations","subscriptions","_a","_i","x","length","definitions","definition","value","payload","globalThis","operation","requiredOperationName","usedOperationName"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"]},"metadata":{},"sourceType":"module"}