{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { cacheSizes, getFragmentDefinitions } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\"; // As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\n\nexport function createFragmentRegistry() {\n  var fragments = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\n\nvar FragmentRegistry =\n/** @class */\nfunction () {\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  function FragmentRegistry() {\n    var fragments = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n\n    this.registry = Object.create(null);\n    this.resetCaches();\n\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  FragmentRegistry.prototype.register = function () {\n    var _this = this;\n\n    var fragments = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n\n    var definitions = new Map();\n    fragments.forEach(function (doc) {\n      getFragmentDefinitions(doc).forEach(function (node) {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach(function (node, name) {\n      if (node !== _this.registry[name]) {\n        _this.registry[name] = node;\n\n        _this.invalidate(name);\n      }\n    });\n    return this;\n  }; // Overridden in the resetCaches method below.\n\n\n  FragmentRegistry.prototype.invalidate = function (name) {};\n\n  FragmentRegistry.prototype.resetCaches = function () {\n    var proto = FragmentRegistry.prototype;\n    this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n      makeCacheKey: function (arg) {\n        return arg;\n      },\n      max: cacheSizes[\"fragmentRegistry.lookup\"] || 1000\n      /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */\n\n    })).dirty; // This dirty function is bound to the wrapped lookup method.\n\n    this.transform = wrap(proto.transform.bind(this), {\n      cache: WeakCache,\n      max: cacheSizes[\"fragmentRegistry.transform\"] || 2000\n      /* defaultCacheSizes[\"fragmentRegistry.transform\"] */\n\n    });\n    this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n      cache: WeakCache,\n      max: cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] || 4000\n      /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */\n\n    });\n  };\n  /*\n   * Note:\n   * This method is only memoized so it can serve as a dependency to `tranform`,\n   * so calling `invalidate` will invalidate cache entries for `transform`.\n   */\n\n\n  FragmentRegistry.prototype.lookup = function (fragmentName) {\n    return this.registry[fragmentName] || null;\n  };\n\n  FragmentRegistry.prototype.transform = function (document) {\n    var _this = this;\n\n    var defined = new Map();\n    getFragmentDefinitions(document).forEach(function (def) {\n      defined.set(def.name.value, def);\n    });\n    var unbound = new Set();\n\n    var enqueue = function (spreadName) {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    var enqueueChildSpreads = function (node) {\n      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n    };\n\n    enqueueChildSpreads(document);\n    var missing = [];\n    var map = Object.create(null); // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n\n    unbound.forEach(function (fragmentName) {\n      var knownFragmentDef = defined.get(fragmentName);\n\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n\n        var def = _this.lookup(fragmentName);\n\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      var defsToAppend_1 = [];\n      missing.forEach(function (name) {\n        var def = map[name];\n\n        if (def) {\n          defsToAppend_1.push(def);\n        }\n      });\n\n      if (defsToAppend_1.length) {\n        document = __assign(__assign({}, document), {\n          definitions: document.definitions.concat(defsToAppend_1)\n        });\n      }\n    }\n\n    return document;\n  };\n\n  FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n    var spreads = Object.create(null);\n    visit(root, {\n      FragmentSpread: function (node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  };\n\n  return FragmentRegistry;\n}();","map":{"version":3,"mappings":"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","names":["visit","wrap","cacheSizes","getFragmentDefinitions","WeakCache","createFragmentRegistry","fragments","FragmentRegistry","apply","__spreadArray","Object","create","resetCaches","length","register","definitions","Map","forEach","doc","node","set","name","value","_this","registry","invalidate","proto","prototype","lookup","bind","makeCacheKey","arg","max","dirty","transform","cache","findFragmentSpreads","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","keys","missing","map","knownFragmentDef","get","push","defsToAppend_1","concat","root","spreads","FragmentSpread"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit } from \"graphql\";\n\nimport { wrap } from \"optimism\";\n\nimport type { FragmentMap } from \"../../utilities/index.js\";\nimport {\n  cacheSizes,\n  defaultCacheSizes,\n  getFragmentDefinitions,\n} from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n  resetCaches(): void;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n\n  public register(...fragments: DocumentNode[]): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    fragments.forEach((doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach((node) => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    const proto = FragmentRegistry.prototype;\n    this.invalidate = (this.lookup = wrap(proto.lookup.bind(this), {\n      makeCacheKey: (arg) => arg,\n      max:\n        cacheSizes[\"fragmentRegistry.lookup\"] ||\n        defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    })).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = wrap(proto.transform.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.transform\"] ||\n        defaultCacheSizes[\"fragmentRegistry.transform\"],\n    });\n    this.findFragmentSpreads = wrap(proto.findFragmentSpreads.bind(this), {\n      cache: WeakCache,\n      max:\n        cacheSizes[\"fragmentRegistry.findFragmentSpreads\"] ||\n        defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    });\n  }\n\n  /*\n   * Note:\n   * This method is only memoized so it can serve as a dependency to `tranform`,\n   * so calling `invalidate` will invalidate cache entries for `transform`.\n   */\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach((def) => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) =>\n      Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach((fragmentName) => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads((map[fragmentName] = def));\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach((name) => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"]},"metadata":{},"sourceType":"module"}