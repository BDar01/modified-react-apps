{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\nexport function graphQLResultHasError(result) {\n  var errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\nexport function getGraphQLErrorsFromResult(result) {\n  var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (incrementalResult) {\n      if (incrementalResult.errors) {\n        graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n      }\n    });\n  }\n\n  return graphQLErrors;\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,iCAAT,QAAkD,wBAAlD;AAEA,OAAM,SAAUC,qBAAV,CAAmCC,MAAnC,EAAyD;AAC7D,MAAMC,MAAM,GAAGC,0BAA0B,CAACF,MAAD,CAAzC;AACA,SAAOH,eAAe,CAACI,MAAD,CAAtB;AACD;AAED,OAAM,SAAUC,0BAAV,CAAwCF,MAAxC,EAA8D;AAClE,MAAMG,aAAa,GACjBN,eAAe,CAACG,MAAM,CAACC,MAAR,CAAf,GAAiCD,MAAM,CAACC,MAAP,CAAcG,KAAd,CAAoB,CAApB,CAAjC,GAA0D,EAD5D;;AAGA,MACEN,iCAAiC,CAACE,MAAD,CAAjC,IACAH,eAAe,CAACG,MAAM,CAACK,WAAR,CAFjB,EAGE;AACAL,UAAM,CAACK,WAAP,CAAmBC,OAAnB,CAA2B,UAACC,iBAAD,EAAkB;AAC3C,UAAIA,iBAAiB,CAACN,MAAtB,EAA8B;AAC5BE,qBAAa,CAACK,IAAd,CAAkBC,KAAlB,gBAAsBF,iBAAiB,CAACN,MAAxC;AACD;AACF,KAJD;AAKD;;AACD,SAAOE,aAAP;AACD","names":["isNonEmptyArray","isExecutionPatchIncrementalResult","graphQLResultHasError","result","errors","getGraphQLErrorsFromResult","graphQLErrors","slice","incremental","forEach","incrementalResult","push","apply"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/common/errorHandling.ts"],"sourcesContent":["import type { FetchResult } from \"../../link/core/index.js\";\nimport { isNonEmptyArray } from \"./arrays.js\";\nimport { isExecutionPatchIncrementalResult } from \"./incrementalResult.js\";\n\nexport function graphQLResultHasError<T>(result: FetchResult<T>): boolean {\n  const errors = getGraphQLErrorsFromResult(result);\n  return isNonEmptyArray(errors);\n}\n\nexport function getGraphQLErrorsFromResult<T>(result: FetchResult<T>) {\n  const graphQLErrors =\n    isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n\n  if (\n    isExecutionPatchIncrementalResult(result) &&\n    isNonEmptyArray(result.incremental)\n  ) {\n    result.incremental.forEach((incrementalResult) => {\n      if (incrementalResult.errors) {\n        graphQLErrors.push(...incrementalResult.errors);\n      }\n    });\n  }\n  return graphQLErrors;\n}\n"]},"metadata":{},"sourceType":"module"}