{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { assertWrappedQueryRef, getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\nimport { useRenderGuard } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nexport function useLoadableQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var _a = options.queryKey,\n      queryKey = _a === void 0 ? [] : _a;\n\n  var _b = React.useState(null),\n      queryRef = _b[0],\n      setQueryRef = _b[1];\n\n  assertWrappedQueryRef(queryRef);\n  var internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && (internalQueryRef === null || internalQueryRef === void 0 ? void 0 : internalQueryRef.didChangeOptions(watchQueryOptions))) {\n    var promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  var calledDuringRender = useRenderGuard();\n  var fetchMore = React.useCallback(function (options) {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n\n    var promise = internalQueryRef.fetchMore(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var refetch = React.useCallback(function (options) {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n\n    var promise = internalQueryRef.refetch(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var loadQuery = React.useCallback(function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    invariant(!calledDuringRender(), 59);\n    var variables = args[0];\n\n    var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n      return client.watchQuery(__assign(__assign({}, watchQueryOptions), {\n        variables: variables\n      }));\n    });\n    setQueryRef(wrapQueryRef(queryRef));\n  }, [query, queryKey, suspenseCache, watchQueryOptions, calledDuringRender, client]);\n  var subscribeToMore = React.useCallback(function (options) {\n    invariant(internalQueryRef, 60);\n    return internalQueryRef.observable.subscribeToMore(options);\n  }, [internalQueryRef]);\n  var reset = React.useCallback(function () {\n    setQueryRef(null);\n  }, []);\n  return [loadQuery, queryRef, {\n    fetchMore: fetchMore,\n    refetch: refetch,\n    reset: reset,\n    subscribeToMore: subscribeToMore\n  }];\n}","map":{"version":3,"mappings":"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","names":["React","useApolloClient","assertWrappedQueryRef","getSuspenseCache","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","useRenderGuard","useWatchQueryOptions","canonicalStringify","invariant","useLoadableQuery","query","options","Object","create","client","suspenseCache","watchQueryOptions","_a","useState","queryRef","setQueryRef","internalQueryRef","didChangeOptions","promise","applyOptions","calledDuringRender","fetchMore","useCallback","Error","refetch","loadQuery","args","cacheKey","variables","concat","queryKey","getQueryRef","watchQuery","__assign","subscribeToMore","observable","reset"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/useLoadableQuery.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  assertWrappedQueryRef,\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { LoadableQueryHookOptions } from \"../types/types.js\";\nimport { __use, useRenderGuard } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type {\n  FetchMoreFunction,\n  RefetchFunction,\n  SubscribeToMoreFunction,\n} from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport type LoadQueryFunction<TVariables extends OperationVariables> = (\n  // Use variadic args to handle cases where TVariables is type `never`, in\n  // which case we don't want to allow a variables argument. In other\n  // words, we don't want to allow variables to be passed as an argument to this\n  // function if the query does not expect variables in the document.\n  ...args: [TVariables] extends [never] ? []\n  : {} extends OnlyRequiredProperties<TVariables> ? [variables?: TVariables]\n  : [variables: TVariables]\n) => void;\n\ntype ResetFunction = () => void;\n\nexport type UseLoadableQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = [\n  loadQuery: LoadQueryFunction<TVariables>,\n  queryRef: QueryRef<TData, TVariables> | null,\n  handlers: {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#fetchMore:member} */\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#refetch:member} */\n    refetch: RefetchFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n    subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n    /**\n     * A function that resets the `queryRef` back to `null`.\n     */\n    reset: ResetFunction;\n  },\n];\n\nexport function useLoadableQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends LoadableQueryHookOptions,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions & TOptions\n): UseLoadableQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n  : TData,\n  TVariables\n>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<TData | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n  }\n): UseLoadableQueryResult<DeepPartial<TData>, TVariables>;\n\n/**\n * A hook for imperatively loading a query, such as responding to a user\n * interaction.\n *\n * > Refer to the [Suspense - Fetching in response to user interaction](https://www.apollographql.com/docs/react/data/suspense#fetching-in-response-to-user-interaction) section for a more in-depth overview of `useLoadableQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLoadableQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function App() {\n *   const [loadGreeting, queryRef] = useLoadableQuery(GET_GREETING);\n *\n *   return (\n *     <>\n *       <button onClick={() => loadGreeting({ language: \"english\" })}>\n *         Load greeting\n *       </button>\n *       <Suspense fallback={<div>Loading...</div>}>\n *         {queryRef && <Hello queryRef={queryRef} />}\n *       </Suspense>\n *     </>\n *   );\n * }\n *\n * function Hello({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.greeting.message}</div>;\n * }\n * ```\n *\n * @since 3.9.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns A tuple in the form of `[loadQuery, queryRef, handlers]`\n */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions\n): UseLoadableQueryResult<TData, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions = Object.create(null)\n): UseLoadableQueryResult<TData, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { queryKey = [] } = options;\n\n  const [queryRef, setQueryRef] = React.useState<QueryRef<\n    TData,\n    TVariables\n  > | null>(null);\n\n  assertWrappedQueryRef(queryRef);\n\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  const calledDuringRender = useRenderGuard();\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<TVariables, TData>\n      );\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.refetch(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const loadQuery: LoadQueryFunction<TVariables> = React.useCallback(\n    (...args) => {\n      invariant(\n        !calledDuringRender(),\n        \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n      );\n\n      const [variables] = args;\n\n      const cacheKey: CacheKey = [\n        query,\n        canonicalStringify(variables),\n        ...([] as any[]).concat(queryKey),\n      ];\n\n      const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n        client.watchQuery({\n          ...watchQueryOptions,\n          variables,\n        } as WatchQueryOptions<any, any>)\n      );\n\n      setQueryRef(wrapQueryRef(queryRef));\n    },\n    [\n      query,\n      queryKey,\n      suspenseCache,\n      watchQueryOptions,\n      calledDuringRender,\n      client,\n    ]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => {\n        invariant(\n          internalQueryRef,\n          \"The query has not been loaded. Please load the query.\"\n        );\n\n        return internalQueryRef.observable.subscribeToMore(options);\n      },\n      [internalQueryRef]\n    );\n\n  const reset: ResetFunction = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n\n  return [loadQuery, queryRef, { fetchMore, refetch, reset, subscribeToMore }];\n}\n"]},"metadata":{},"sourceType":"module"}