{"ast":null,"code":"var _jsxFileName = \"/media/rk/disk2/React/crwn-clothing-graphql/src/routes/category/category.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router-dom';\nimport { gql, useQuery } from '@apollo/client';\nimport { useState, useEffect, Fragment } from 'react';\nimport { CategoryContainer, Title } from './category.styles';\nimport Spinner from '../../components/spinner/spinner.component';\nimport ProductCard from '../../components/product-card/product-card.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_CATEGORY = gql`\n  query($title: String!) {\n    getCollectionsByTitle(title: $title) {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }  \n`;\n\nconst Category = () => {\n  _s();\n\n  const {\n    category\n  } = useParams();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CATEGORY, {\n    variables: {\n      title: category\n    }\n  });\n  useEffect(() => {\n    if (data) {\n      const {\n        getCollectionsByTitle: {\n          items\n        }\n      } = data;\n      setProducts(items);\n    }\n  }, [category, data]);\n  const [products, setProducts] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: category.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n        children: products && products.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: product\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Category, \"M14HkCvnwtW2QzhnHmYfnV8mqZM=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["/media/rk/disk2/React/crwn-clothing-graphql/src/routes/category/category.component.jsx"],"names":["useParams","gql","useQuery","useState","useEffect","Fragment","CategoryContainer","Title","Spinner","ProductCard","GET_CATEGORY","Category","category","loading","error","data","variables","title","getCollectionsByTitle","items","setProducts","products","toUpperCase","map","product","id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AAEA,SAASC,iBAAT,EAA4BC,KAA5B,QAAyC,mBAAzC;AAEA,OAAOC,OAAP,MAAoB,4CAApB;AACA,OAAOC,WAAP,MAAwB,sDAAxB;;AAEA,MAAMC,YAAY,GAAGT,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMU,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAeZ,SAAS,EAA9B;AAEA,QAAM;AAAEa,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bb,QAAQ,CAACQ,YAAD,EAAe;AACtDM,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAEL;AADE;AAD2C,GAAf,CAAzC;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,IAAJ,EAAU;AACR,YAAM;AACJG,QAAAA,qBAAqB,EAAE;AAAEC,UAAAA;AAAF;AADnB,UAEFJ,IAFJ;AAIAK,MAAAA,WAAW,CAACD,KAAD,CAAX;AACD;AACF,GARQ,EAQN,CAACP,QAAD,EAAWG,IAAX,CARM,CAAT;AAUA,QAAM,CAACM,QAAD,EAAWD,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AAEA,sBACE,QAAC,QAAD;AAAA,cACGU,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBACN,QAAC,QAAD;AAAA,8BACE,QAAC,KAAD;AAAA,kBAAQD,QAAQ,CAACU,WAAT;AAAR;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,iBAAD;AAAA,kBACGD,QAAQ,IACPA,QAAQ,CAACE,GAAT,CAAcC,OAAD,iBACX,QAAC,WAAD;AAA8B,UAAA,OAAO,EAAEA;AAAvC,WAAkBA,OAAO,CAACC,EAA1B;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CApCD;;GAAMd,Q;UACiBX,S,EAEYE,Q;;;KAH7BS,Q;AAsCN,eAAeA,QAAf","sourcesContent":["import { useParams } from 'react-router-dom';\nimport { gql, useQuery } from '@apollo/client';\nimport { useState, useEffect, Fragment } from 'react';\n\nimport { CategoryContainer, Title } from './category.styles';\n\nimport Spinner from '../../components/spinner/spinner.component';\nimport ProductCard from '../../components/product-card/product-card.component';\n\nconst GET_CATEGORY = gql`\n  query($title: String!) {\n    getCollectionsByTitle(title: $title) {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }  \n`\n\nconst Category = () => {\n  const { category } = useParams();\n  \n  const { loading, error, data } = useQuery(GET_CATEGORY, {\n    variables: {\n      title: category\n    }\n  });\n  \n  useEffect(() => {\n    if (data) {\n      const {\n        getCollectionsByTitle: { items }\n      } = data;\n\n      setProducts(items);\n    }\n  }, [category, data])\n\n  const [products, setProducts] = useState([]);\n\n  return (\n    <Fragment>\n      {loading ? <Spinner /> : (\n        <Fragment>\n          <Title>{category.toUpperCase()}</Title>\n          <CategoryContainer>\n            {products &&\n              products.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n          </CategoryContainer>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Category;\n"]},"metadata":{},"sourceType":"module"}