{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n\n/** */\n\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction noop() {}\n\nexport var lastWatchOptions = Symbol();\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\n\nexport function useQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  return wrapHook(\"useQuery\", _useQuery, useApolloClient(options && options.client))(query, options);\n}\n\nfunction _useQuery(query, options) {\n  var _a = useQueryInternals(query, options),\n      result = _a.result,\n      obsQueryFields = _a.obsQueryFields;\n\n  return React.useMemo(function () {\n    return __assign(__assign({}, result), obsQueryFields);\n  }, [result, obsQueryFields]);\n}\n\nfunction useInternalState(client, query, options, renderPromises, makeWatchQueryOptions) {\n  function createInternalState(previous) {\n    var _a;\n\n    verifyDocumentType(query, DocumentType.Query);\n    var internalState = {\n      client: client,\n      query: query,\n      observable: // See if there is an existing observable that was used to fetch the same\n      // data and if so, use it instead since it will contain the proper queryId\n      // to fetch the result set. This is used during SSR.\n      renderPromises && renderPromises.getSSRObservable(makeWatchQueryOptions()) || client.watchQuery(getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: (_a = previous === null || previous === void 0 ? void 0 : previous.resultData.current) === null || _a === void 0 ? void 0 : _a.data\n      }\n    };\n    return internalState;\n  }\n\n  var _a = React.useState(createInternalState),\n      internalState = _a[0],\n      updateInternalState = _a[1];\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n\n\n  function onQueryExecuted(watchQueryOptions) {\n    var _a;\n\n    var _b; // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n\n\n    Object.assign(internalState.observable, (_a = {}, _a[lastWatchOptions] = watchQueryOptions, _a));\n    var resultData = internalState.resultData;\n    updateInternalState(__assign(__assign({}, internalState), {\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: ((_b = resultData.current) === null || _b === void 0 ? void 0 : _b.data) || resultData.previousData,\n        current: undefined\n      })\n    }));\n  }\n\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    var newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted];\n  }\n\n  return [internalState, onQueryExecuted];\n}\n\nexport function useQueryInternals(query, options) {\n  var client = useApolloClient(options.client);\n  var renderPromises = React.useContext(getApolloContext()).renderPromises;\n  var isSyncSSR = !!renderPromises;\n  var disableNetworkFetches = client.disableNetworkFetches;\n  var ssrAllowed = options.ssr !== false && !options.skip;\n  var partialRefetch = options.partialRefetch;\n  var makeWatchQueryOptions = createMakeWatchQueryOptions(client, query, options, isSyncSSR);\n\n  var _a = useInternalState(client, query, options, renderPromises, makeWatchQueryOptions),\n      _b = _a[0],\n      observable = _b.observable,\n      resultData = _b.resultData,\n      onQueryExecuted = _a[1];\n\n  var watchQueryOptions = makeWatchQueryOptions(observable);\n  useResubscribeIfNecessary(resultData, // might get mutated during render\n  observable, // might get mutated during render\n  client, options, watchQueryOptions);\n  var obsQueryFields = React.useMemo(function () {\n    return bindObservableMethods(observable);\n  }, [observable]);\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n  var result = useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, {\n    onCompleted: options.onCompleted || noop,\n    onError: options.onError || noop\n  });\n  return {\n    result: result,\n    obsQueryFields: obsQueryFields,\n    observable: observable,\n    resultData: resultData,\n    client: client,\n    onQueryExecuted: onQueryExecuted\n  };\n}\n\nfunction useObservableSubscriptionResult(resultData, observable, client, options, watchQueryOptions, disableNetworkFetches, partialRefetch, isSyncSSR, callbacks) {\n  var callbackRef = React.useRef(callbacks);\n  React.useEffect(function () {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    callbackRef.current = callbacks;\n  });\n  var resultOverride = (isSyncSSR || disableNetworkFetches) && options.ssr === false && !options.skip ? // If SSR has been explicitly disabled, and this function has been called\n  // on the server side, return the default loading state.\n  ssrDisabledResult : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ? // When skipping a query (ie. we're not querying for data but still want to\n  // render children), make sure the `data` is cleared out and `loading` is\n  // set to `false` (since we aren't loading anything).\n  //\n  // NOTE: We no longer think this is the correct behavior. Skipping should\n  // not automatically set `data` to `undefined`, but instead leave the\n  // previous data in place. In other words, skipping should not mandate that\n  // previously received data is all of a sudden removed. Unfortunately,\n  // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n  // to address this.\n  skipStandbyResult : void 0;\n  var previousData = resultData.previousData;\n  var currentResultOverride = React.useMemo(function () {\n    return resultOverride && toQueryResult(resultOverride, previousData, observable, client);\n  }, [client, observable, resultOverride, previousData]);\n  return useSyncExternalStore(React.useCallback(function (handleStoreChange) {\n    // reference `disableNetworkFetches` here to ensure that the rules of hooks\n    // keep it as a dependency of this effect, even though it's not used\n    disableNetworkFetches;\n\n    if (isSyncSSR) {\n      return function () {};\n    }\n\n    var onNext = function () {\n      var previousResult = resultData.current; // We use `getCurrentResult()` instead of the onNext argument because\n      // the values differ slightly. Specifically, loading results will have\n      // an empty object for data instead of `undefined` for some reason.\n\n      var result = observable.getCurrentResult(); // Make sure we're not attempting to re-render similar results\n\n      if (previousResult && previousResult.loading === result.loading && previousResult.networkStatus === result.networkStatus && equal(previousResult.data, result.data)) {\n        return;\n      }\n\n      setResult(result, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n    };\n\n    var onError = function (error) {\n      subscription.current.unsubscribe();\n      subscription.current = observable.resubscribeAfterError(onNext, onError);\n\n      if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      var previousResult = resultData.current;\n\n      if (!previousResult || previousResult && previousResult.loading || !equal(error, previousResult.error)) {\n        setResult({\n          data: previousResult && previousResult.data,\n          error: error,\n          loading: false,\n          networkStatus: NetworkStatus.error\n        }, resultData, observable, client, partialRefetch, handleStoreChange, callbackRef.current);\n      }\n    }; // TODO evaluate if we keep this in\n    // React Compiler cannot handle scoped `let` access, but a mutable object\n    // like this is fine.\n    // was:\n    // let subscription = observable.subscribe(onNext, onError);\n\n\n    var subscription = {\n      current: observable.subscribe(onNext, onError)\n    }; // Do the \"unsubscribe\" with a short delay.\n    // This way, an existing subscription can be reused without an additional\n    // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n    // happen in very fast succession.\n\n    return function () {\n      setTimeout(function () {\n        return subscription.current.unsubscribe();\n      });\n    };\n  }, [disableNetworkFetches, isSyncSSR, observable, resultData, partialRefetch, client]), function () {\n    return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n  }, function () {\n    return currentResultOverride || getCurrentResult(resultData, observable, callbackRef.current, partialRefetch, client);\n  });\n}\n\nfunction useRegisterSSRObservable(observable, renderPromises, ssrAllowed) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n} // this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\n\n\nfunction useResubscribeIfNecessary(\n/** this hook will mutate properties on `resultData` */\nresultData,\n/** this hook will mutate properties on `observable` */\nobservable, client, options, watchQueryOptions) {\n  var _a;\n\n  if (observable[lastWatchOptions] && !equal(observable[lastWatchOptions], watchQueryOptions)) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(getObsQueryOptions(observable, client, options, watchQueryOptions)); // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n\n    resultData.previousData = ((_a = resultData.current) === null || _a === void 0 ? void 0 : _a.data) || resultData.previousData;\n    resultData.current = void 0;\n  }\n\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\n\n\nexport function createMakeWatchQueryOptions(client, query, _a, isSyncSSR) {\n  if (_a === void 0) {\n    _a = {};\n  }\n\n  var skip = _a.skip,\n      ssr = _a.ssr,\n      onCompleted = _a.onCompleted,\n      onError = _a.onError,\n      defaultOptions = _a.defaultOptions,\n      // The above options are useQuery-specific, so this ...otherOptions spread\n  // makes otherOptions almost a WatchQueryOptions object, except for the\n  // query property that we add below.\n  otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"defaultOptions\"]);\n\n  return function (observable) {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    var watchQueryOptions = Object.assign(otherOptions, {\n      query: query\n    });\n\n    if (isSyncSSR && (watchQueryOptions.fetchPolicy === \"network-only\" || watchQueryOptions.fetchPolicy === \"cache-and-network\")) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {};\n    }\n\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy = watchQueryOptions.initialFetchPolicy || watchQueryOptions.fetchPolicy || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy = (observable === null || observable === void 0 ? void 0 : observable.options.initialFetchPolicy) || getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n\n    return watchQueryOptions;\n  };\n}\nexport function getObsQueryOptions(observable, client, queryHookOptions, watchQueryOptions) {\n  var toMerge = [];\n  var globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  } // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n\n\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n  return toMerge.reduce(mergeOptions);\n}\n\nfunction setResult(nextResult, resultData, observable, client, partialRefetch, forceUpdate, callbacks) {\n  var previousResult = resultData.current;\n\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({\n      graphQLErrors: nextResult.errors\n    });\n  }\n\n  resultData.current = toQueryResult(unsafeHandlePartialRefetch(nextResult, observable, partialRefetch), resultData.previousData, observable, client); // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult === null || previousResult === void 0 ? void 0 : previousResult.networkStatus, callbacks);\n}\n\nfunction handleErrorOrCompleted(result, previousNetworkStatus, callbacks) {\n  if (!result.loading) {\n    var error_1 = toApolloError(result); // wait a tick in case we are in the middle of rendering a component\n\n    Promise.resolve().then(function () {\n      if (error_1) {\n        callbacks.onError(error_1);\n      } else if (result.data && previousNetworkStatus !== result.networkStatus && result.networkStatus === NetworkStatus.ready) {\n        callbacks.onCompleted(result.data);\n      }\n    }).catch(function (error) {\n      globalThis.__DEV__ !== false && invariant.warn(error);\n    });\n  }\n}\n\nfunction getCurrentResult(resultData, observable, callbacks, partialRefetch, client) {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(observable.getCurrentResult(), resultData, observable, client, partialRefetch, function () {}, callbacks);\n  }\n\n  return resultData.current;\n}\n\nexport function getDefaultFetchPolicy(queryHookDefaultOptions, clientDefaultOptions) {\n  var _a;\n\n  return (queryHookDefaultOptions === null || queryHookDefaultOptions === void 0 ? void 0 : queryHookDefaultOptions.fetchPolicy) || ((_a = clientDefaultOptions === null || clientDefaultOptions === void 0 ? void 0 : clientDefaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n}\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({\n    graphQLErrors: result.errors\n  }) : result.error;\n}\nexport function toQueryResult(result, previousData, observable, client) {\n  var data = result.data,\n      partial = result.partial,\n      resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n\n  var queryResult = __assign(__assign({\n    data: data\n  }, resultWithoutPartial), {\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData: previousData\n  });\n\n  return queryResult;\n}\n\nfunction unsafeHandlePartialRefetch(result, observable, partialRefetch) {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (result.partial && partialRefetch && !result.loading && (!result.data || Object.keys(result.data).length === 0) && observable.options.fetchPolicy !== \"cache-only\") {\n    observable.refetch();\n    return __assign(__assign({}, result), {\n      loading: true,\n      networkStatus: NetworkStatus.refetch\n    });\n  }\n\n  return result;\n}\n\nvar ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0,\n  error: void 0,\n  networkStatus: NetworkStatus.loading\n});\nvar skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0,\n  error: void 0,\n  networkStatus: NetworkStatus.ready\n});\n\nfunction bindObservableMethods(observable) {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable)\n  };\n}","map":{"version":3,"mappings":"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","names":["invariant","React","useSyncExternalStore","equal","mergeOptions","getApolloContext","ApolloError","NetworkStatus","DocumentType","verifyDocumentType","useApolloClient","compact","isNonEmptyArray","maybeDeepFreeze","wrapHook","Object","hasOwnProperty","noop","lastWatchOptions","Symbol","useQuery","query","options","create","_useQuery","client","useQueryInternals","result","obsQueryFields","useMemo","useInternalState","renderPromises","makeWatchQueryOptions","createInternalState","previous","Query","internalState","observable","getSSRObservable","watchQuery","getObsQueryOptions","resultData","previousData","current","_a","data","useState","updateInternalState","onQueryExecuted","watchQueryOptions","assign","_b","undefined","newInternalState","useContext","isSyncSSR","disableNetworkFetches","ssrAllowed","ssr","skip","partialRefetch","createMakeWatchQueryOptions","useResubscribeIfNecessary","useRegisterSSRObservable","useObservableSubscriptionResult","onCompleted","onError","callbacks","callbackRef","useRef","useEffect","resultOverride","ssrDisabledResult","fetchPolicy","skipStandbyResult","currentResultOverride","toQueryResult","useCallback","handleStoreChange","onNext","previousResult","getCurrentResult","loading","networkStatus","setResult","error","subscription","unsubscribe","resubscribeAfterError","call","subscribe","setTimeout","registerSSRObservable","addObservableQueryPromise","reobserve","defaultOptions","otherOptions","variables","initialFetchPolicy","getDefaultFetchPolicy","queryHookOptions","toMerge","globalDefaults","push","reduce","nextResult","forceUpdate","errors","graphQLErrors","unsafeHandlePartialRefetch","handleErrorOrCompleted","previousNetworkStatus","error_1","toApolloError","Promise","resolve","then","ready","catch","globalThis","queryHookDefaultOptions","clientDefaultOptions","partial","resultWithoutPartial","queryResult","called","keys","length","refetch","bindObservableMethods","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport type {\n  ApolloClient,\n  DefaultOptions,\n  OperationVariables,\n  WatchQueryFetchPolicy,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloQueryResult,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { RenderPromises } from \"../ssr/RenderPromises.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\ntype InternalQueryResult<TData, TVariables extends OperationVariables> = Omit<\n  QueryResult<TData, TVariables>,\n  Exclude<keyof ObservableQueryFields<TData, TVariables>, \"variables\">\n>;\n\nfunction noop() {}\nexport const lastWatchOptions = Symbol();\n\nexport interface ObsQueryWithMeta<TData, TVariables extends OperationVariables>\n  extends ObservableQuery<TData, TVariables> {\n  [lastWatchOptions]?: WatchQueryOptions<TVariables, TData>;\n}\n\nexport interface InternalResult<TData, TVariables extends OperationVariables> {\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  current?: undefined | InternalQueryResult<TData, TVariables>;\n  previousData?: undefined | MaybeMasked<TData>;\n}\n\ninterface InternalState<TData, TVariables extends OperationVariables> {\n  client: ReturnType<typeof useApolloClient>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  observable: ObsQueryWithMeta<TData, TVariables>;\n  resultData: InternalResult<TData, TVariables>;\n}\n\nexport type UpdateInternalState<\n  TData,\n  TVariables extends OperationVariables,\n> = (state: InternalState<TData, TVariables>) => void;\n\ninterface Callbacks<TData> {\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  onCompleted(data: MaybeMasked<TData>): void;\n  onError(error: ApolloError): void;\n}\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return wrapHook(\n    \"useQuery\",\n    _useQuery,\n    useApolloClient(options && options.client)\n  )(query, options);\n}\n\nfunction _useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const { result, obsQueryFields } = useQueryInternals(query, options);\n  return React.useMemo(\n    () => ({ ...result, ...obsQueryFields }),\n    [result, obsQueryFields]\n  );\n}\n\nfunction useInternalState<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<any, any>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  renderPromises: RenderPromises | undefined,\n  makeWatchQueryOptions: () => WatchQueryOptions<TVariables, TData>\n) {\n  function createInternalState(previous?: InternalState<TData, TVariables>) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    const internalState: InternalState<TData, TVariables> = {\n      client,\n      query,\n      observable:\n        // See if there is an existing observable that was used to fetch the same\n        // data and if so, use it instead since it will contain the proper queryId\n        // to fetch the result set. This is used during SSR.\n        (renderPromises &&\n          renderPromises.getSSRObservable(makeWatchQueryOptions())) ||\n        client.watchQuery(\n          getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())\n        ),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: previous?.resultData.current?.data,\n      },\n    };\n\n    return internalState as InternalState<TData, TVariables>;\n  }\n\n  let [internalState, updateInternalState] =\n    React.useState(createInternalState);\n\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n  function onQueryExecuted(\n    watchQueryOptions: WatchQueryOptions<TVariables, TData>\n  ) {\n    // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n    Object.assign(internalState.observable, {\n      [lastWatchOptions]: watchQueryOptions,\n    });\n    const resultData = internalState.resultData;\n    updateInternalState({\n      ...internalState,\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: resultData.current?.data || resultData.previousData,\n        current: undefined,\n      }),\n    });\n  }\n\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    const newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted] as const;\n  }\n\n  return [internalState, onQueryExecuted] as const;\n}\n\nexport function useQueryInternals<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const client = useApolloClient(options.client);\n\n  const renderPromises = React.useContext(getApolloContext()).renderPromises;\n  const isSyncSSR = !!renderPromises;\n  const disableNetworkFetches = client.disableNetworkFetches;\n  const ssrAllowed = options.ssr !== false && !options.skip;\n  const partialRefetch = options.partialRefetch;\n\n  const makeWatchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    isSyncSSR\n  );\n\n  const [{ observable, resultData }, onQueryExecuted] = useInternalState(\n    client,\n    query,\n    options,\n    renderPromises,\n    makeWatchQueryOptions\n  );\n\n  const watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>> =\n    makeWatchQueryOptions(observable);\n\n  useResubscribeIfNecessary<TData, TVariables>(\n    resultData, // might get mutated during render\n    observable, // might get mutated during render\n    client,\n    options,\n    watchQueryOptions\n  );\n\n  const obsQueryFields = React.useMemo<\n    Omit<ObservableQueryFields<TData, TVariables>, \"variables\">\n  >(() => bindObservableMethods(observable), [observable]);\n\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n\n  const result = useObservableSubscriptionResult<TData, TVariables>(\n    resultData,\n    observable,\n    client,\n    options,\n    watchQueryOptions,\n    disableNetworkFetches,\n    partialRefetch,\n    isSyncSSR,\n    {\n      onCompleted: options.onCompleted || noop,\n      onError: options.onError || noop,\n    }\n  );\n\n  return {\n    result,\n    obsQueryFields,\n    observable,\n    resultData,\n    client,\n    onQueryExecuted,\n  };\n}\n\nfunction useObservableSubscriptionResult<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>,\n  disableNetworkFetches: boolean,\n  partialRefetch: boolean | undefined,\n  isSyncSSR: boolean,\n  callbacks: {\n    onCompleted: (data: MaybeMasked<TData>) => void;\n    onError: (error: ApolloError) => void;\n  }\n) {\n  const callbackRef = React.useRef<Callbacks<TData>>(callbacks);\n  React.useEffect(() => {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    callbackRef.current = callbacks;\n  });\n\n  const resultOverride =\n    (\n      (isSyncSSR || disableNetworkFetches) &&\n      options.ssr === false &&\n      !options.skip\n    ) ?\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      ssrDisabledResult\n    : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      skipStandbyResult\n    : void 0;\n\n  const previousData = resultData.previousData;\n  const currentResultOverride = React.useMemo(\n    () =>\n      resultOverride &&\n      toQueryResult(resultOverride, previousData, observable, client),\n    [client, observable, resultOverride, previousData]\n  );\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (handleStoreChange) => {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n\n        if (isSyncSSR) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = resultData.current;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = observable.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          setResult(\n            result,\n            resultData,\n            observable,\n            client,\n            partialRefetch,\n            handleStoreChange,\n            callbackRef.current\n          );\n        };\n\n        const onError = (error: Error) => {\n          subscription.current.unsubscribe();\n          subscription.current = observable.resubscribeAfterError(\n            onNext,\n            onError\n          );\n\n          if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = resultData.current;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            setResult(\n              {\n                data: (previousResult &&\n                  previousResult.data) as MaybeMasked<TData>,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              },\n              resultData,\n              observable,\n              client,\n              partialRefetch,\n              handleStoreChange,\n              callbackRef.current\n            );\n          }\n        };\n\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        const subscription = { current: observable.subscribe(onNext, onError) };\n\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return () => {\n          setTimeout(() => subscription.current.unsubscribe());\n        };\n      },\n\n      [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client,\n      ]\n    ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      )\n  );\n}\n\nfunction useRegisterSSRObservable(\n  observable: ObsQueryWithMeta<any, any>,\n  renderPromises: RenderPromises | undefined,\n  ssrAllowed: boolean\n) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n}\n\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  /** this hook will mutate properties on `resultData` */\n  resultData: InternalResult<TData, TVariables>,\n  /** this hook will mutate properties on `observable` */\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>\n) {\n  if (\n    observable[lastWatchOptions] &&\n    !equal(observable[lastWatchOptions], watchQueryOptions)\n  ) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(\n      getObsQueryOptions(observable, client, options, watchQueryOptions)\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    resultData.previousData =\n      resultData.current?.data || resultData.previousData;\n    resultData.current = void 0;\n  }\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {},\n  isSyncSSR: boolean\n) {\n  return (\n    observable?: ObservableQuery<TData, TVariables>\n  ): WatchQueryOptions<TVariables, TData> => {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query });\n\n    if (\n      isSyncSSR &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy =\n        watchQueryOptions.initialFetchPolicy ||\n        watchQueryOptions.fetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        observable?.options.initialFetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n\n    return watchQueryOptions;\n  };\n}\n\nexport function getObsQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  observable: ObservableQuery<TData, TVariables> | undefined,\n  client: ApolloClient<object>,\n  queryHookOptions: QueryHookOptions<TData, TVariables>,\n  watchQueryOptions: Partial<WatchQueryOptions<TVariables, TData>>\n): WatchQueryOptions<TVariables, TData> {\n  const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n  const globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  }\n\n  // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n\n  return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n}\n\nfunction setResult<TData, TVariables extends OperationVariables>(\n  nextResult: ApolloQueryResult<MaybeMasked<TData>>,\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  partialRefetch: boolean | undefined,\n  forceUpdate: () => void,\n  callbacks: Callbacks<TData>\n) {\n  const previousResult = resultData.current;\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({ graphQLErrors: nextResult.errors });\n  }\n\n  resultData.current = toQueryResult(\n    unsafeHandlePartialRefetch(nextResult, observable, partialRefetch),\n    resultData.previousData,\n    observable,\n    client\n  );\n  // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult?.networkStatus, callbacks);\n}\n\nfunction handleErrorOrCompleted<TData>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousNetworkStatus: NetworkStatus | undefined,\n  callbacks: Callbacks<TData>\n) {\n  if (!result.loading) {\n    const error = toApolloError(result);\n\n    // wait a tick in case we are in the middle of rendering a component\n    Promise.resolve()\n      .then(() => {\n        if (error) {\n          callbacks.onError(error);\n        } else if (\n          result.data &&\n          previousNetworkStatus !== result.networkStatus &&\n          result.networkStatus === NetworkStatus.ready\n        ) {\n          callbacks.onCompleted(result.data);\n        }\n      })\n      .catch((error) => {\n        invariant.warn(error);\n      });\n  }\n}\n\nfunction getCurrentResult<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  callbacks: Callbacks<TData>,\n  partialRefetch: boolean | undefined,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(\n      observable.getCurrentResult(),\n      resultData,\n      observable,\n      client,\n      partialRefetch,\n      () => {},\n      callbacks\n    );\n  }\n  return resultData.current!;\n}\n\nexport function getDefaultFetchPolicy<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  queryHookDefaultOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n  clientDefaultOptions?: DefaultOptions\n): WatchQueryFetchPolicy {\n  return (\n    queryHookDefaultOptions?.fetchPolicy ||\n    clientDefaultOptions?.watchQuery?.fetchPolicy ||\n    \"cache-first\"\n  );\n}\n\nexport function toApolloError<TData>(\n  result: Pick<ApolloQueryResult<TData>, \"errors\" | \"error\">\n): ApolloError | undefined {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\nexport function toQueryResult<TData, TVariables extends OperationVariables>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousData: MaybeMasked<TData> | undefined,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  const { data, partial, ...resultWithoutPartial } = result;\n  const queryResult: InternalQueryResult<TData, TVariables> = {\n    data, // Ensure always defined, even if result.data is missing.\n    ...resultWithoutPartial,\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData,\n  };\n  return queryResult;\n}\n\nfunction unsafeHandlePartialRefetch<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  observable: ObservableQuery<TData, TVariables>,\n  partialRefetch: boolean | undefined\n): ApolloQueryResult<MaybeMasked<TData>> {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (\n    result.partial &&\n    partialRefetch &&\n    !result.loading &&\n    (!result.data || Object.keys(result.data).length === 0) &&\n    observable.options.fetchPolicy !== \"cache-only\"\n  ) {\n    observable.refetch();\n    return {\n      ...result,\n      loading: true,\n      networkStatus: NetworkStatus.refetch,\n    };\n  }\n  return result;\n}\n\nconst ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.loading,\n});\n\nconst skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.ready,\n});\n\nfunction bindObservableMethods<TData, TVariables extends OperationVariables>(\n  observable: ObservableQuery<TData, TVariables>\n) {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}