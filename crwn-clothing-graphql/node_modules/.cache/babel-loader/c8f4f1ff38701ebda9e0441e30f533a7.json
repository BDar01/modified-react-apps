{"ast":null,"code":"import { dep, Slot } from \"optimism\"; // Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\n\nexport var cacheSlot = new Slot();\nvar cacheInfoMap = new WeakMap();\n\nfunction getCacheInfo(cache) {\n  var info = cacheInfoMap.get(cache);\n\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set(),\n      dep: dep()\n    });\n  }\n\n  return info;\n}\n\nexport function forgetCache(cache) {\n  getCacheInfo(cache).vars.forEach(function (rv) {\n    return rv.forgetCache(cache);\n  });\n} // Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\n\nexport function recallCache(cache) {\n  getCacheInfo(cache).vars.forEach(function (rv) {\n    return rv.attachCache(cache);\n  });\n}\nexport function makeVar(value) {\n  var caches = new Set();\n  var listeners = new Set();\n\n  var rv = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        caches.forEach(function (cache) {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv); // Broadcast changes to any caches that have previously read\n          // from this variable.\n\n          broadcast(cache);\n        }); // Finally, notify any listeners added via rv.onNextChange.\n\n        var oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(function (listener) {\n          return listener(value);\n        });\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      var cache = cacheSlot.getValue();\n\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = function (listener) {\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var attach = rv.attachCache = function (cache) {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = function (cache) {\n    return caches.delete(cache);\n  };\n\n  return rv;\n}\n\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"mappings":"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","names":["dep","Slot","cacheSlot","cacheInfoMap","WeakMap","getCacheInfo","cache","info","get","set","vars","Set","forgetCache","forEach","rv","recallCache","attachCache","makeVar","value","caches","listeners","newValue","arguments","length","dirty","broadcast","oldListeners","Array","from","clear","listener","getValue","attach","onNextChange","add","delete","broadcastWatches"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/cache/inmemory/reactiveVars.ts"],"sourcesContent":["import type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep, Slot } from \"optimism\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { ApolloCache } from \"../../core/index.js\";\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<\n  ApolloCache<any>,\n  {\n    vars: Set<ReactiveVar<any>>;\n    dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n  }\n>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(\n      cache,\n      (info = {\n        vars: new Set(),\n        dep: dep(),\n      })\n    );\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach((cache) => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach((listener) => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = (listener) => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = (rv.attachCache = (cache) => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  });\n\n  rv.forgetCache = (cache) => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}