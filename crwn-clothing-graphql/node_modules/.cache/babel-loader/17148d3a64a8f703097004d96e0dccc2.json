{"ast":null,"code":"import { newInvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\nexport function makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\nexport function isReference(obj) {\n  return Boolean(obj && typeof obj === \"object\" && typeof obj.__ref === \"string\");\n}\nexport function isDocumentNode(value) {\n  return isNonNullObject(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\n\nfunction isStringValue(value) {\n  return value.kind === \"StringValue\";\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === \"BooleanValue\";\n}\n\nfunction isIntValue(value) {\n  return value.kind === \"IntValue\";\n}\n\nfunction isFloatValue(value) {\n  return value.kind === \"FloatValue\";\n}\n\nfunction isVariable(value) {\n  return value.kind === \"Variable\";\n}\n\nfunction isObjectValue(value) {\n  return value.kind === \"ObjectValue\";\n}\n\nfunction isListValue(value) {\n  return value.kind === \"ListValue\";\n}\n\nfunction isEnumValue(value) {\n  return value.kind === \"EnumValue\";\n}\n\nfunction isNullValue(value) {\n  return value.kind === \"NullValue\";\n}\n\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(96, name.value, value.kind);\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\"connection\", \"include\", \"skip\", \"client\", \"rest\", \"export\", \"nonreactive\"]; // Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\n\nvar storeKeyNameStringify = canonicalStringify;\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n  if (args && directives && directives[\"connection\"] && directives[\"connection\"][\"key\"]) {\n    if (directives[\"connection\"][\"filter\"] && directives[\"connection\"][\"filter\"].length > 0) {\n      var filterKeys = directives[\"connection\"][\"filter\"] ? directives[\"connection\"][\"filter\"] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return \"\".concat(directives[\"connection\"][\"key\"], \"(\").concat(storeKeyNameStringify(filteredArgs_1), \")\");\n    } else {\n      return directives[\"connection\"][\"key\"];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    var stringifiedArgs = storeKeyNameStringify(args);\n    completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\".concat(key, \"(\").concat(storeKeyNameStringify(directives[key]), \")\");\n      } else {\n        completeFieldName += \"@\".concat(key);\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify: function (s) {\n    var previous = storeKeyNameStringify;\n    storeKeyNameStringify = s;\n    return previous;\n  }\n});\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n  var fragments;\n\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n\n  if (fragments) {\n    for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {\n      var selection = fragments_1[_b];\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\nexport function isField(selection) {\n  return selection.kind === \"Field\";\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === \"InlineFragment\";\n}","map":{"version":3,"mappings":"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","names":["newInvariantError","isNonNullObject","getFragmentFromSelection","canonicalStringify","makeReference","id","__ref","String","isReference","obj","Boolean","isDocumentNode","value","kind","Array","isArray","definitions","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","variableValue","values","listValue","nestedArgArrayObj","field","directivesObj","directives","forEach","directive","arguments","_a","getStoreKeyName","KNOWN_DIRECTIVES","args","length","filteredArgs_1","filterKeys","concat","storeKeyNameStringify","completeFieldName","Object","key","setStringify","s","previous","argObj_1","resultKeyNameFromField","getTypenameFromResult","result","selectionSet","fragmentMap","_i","isField","fragments","typename","selection","isInlineFragment"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/graphql/storeUtils.ts"],"sourcesContent":["import { newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n  FragmentSpreadNode,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../common/objects.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(\n    obj && typeof obj === \"object\" && typeof obj.__ref === \"string\"\n  );\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\n/**\n * Workaround for a TypeScript quirk:\n * types per default have an implicit index signature that makes them\n * assignable to `StoreObject`.\n * interfaces do not have that implicit index signature, so they cannot\n * be assigned to `StoreObject`.\n * This type just maps over a type or interface that is passed in,\n * implicitly adding the index signature.\n * That way, the result can be assigned to `StoreObject`.\n *\n * This is important if some user-defined interface is used e.g.\n * in cache.modify, where the `toReference` method expects a\n * `StoreObject` as input.\n */\nexport type AsStoreObject<T extends { __typename?: string }> = {\n  [K in keyof T]: T[K];\n};\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === \"StringValue\";\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === \"BooleanValue\";\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === \"IntValue\";\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === \"FloatValue\";\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === \"Variable\";\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === \"ObjectValue\";\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === \"ListValue\";\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === \"EnumValue\";\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === \"NullValue\";\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  \"connection\",\n  \"include\",\n  \"skip\",\n  \"client\",\n  \"rest\",\n  \"export\",\n  \"nonreactive\",\n];\n\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify: (value: any) => string = canonicalStringify;\n\nexport const getStoreKeyName = Object.assign(\n  function (\n    fieldName: string,\n    args?: Record<string, any> | null,\n    directives?: Directives\n  ): string {\n    if (\n      args &&\n      directives &&\n      directives[\"connection\"] &&\n      directives[\"connection\"][\"key\"]\n    ) {\n      if (\n        directives[\"connection\"][\"filter\"] &&\n        (directives[\"connection\"][\"filter\"] as string[]).length > 0\n      ) {\n        const filterKeys =\n          directives[\"connection\"][\"filter\"] ?\n            (directives[\"connection\"][\"filter\"] as string[])\n          : [];\n        filterKeys.sort();\n\n        const filteredArgs = {} as { [key: string]: any };\n        filterKeys.forEach((key) => {\n          filteredArgs[key] = args[key];\n        });\n\n        return `${directives[\"connection\"][\"key\"]}(${storeKeyNameStringify(\n          filteredArgs\n        )})`;\n      } else {\n        return directives[\"connection\"][\"key\"];\n      }\n    }\n\n    let completeFieldName: string = fieldName;\n\n    if (args) {\n      // We can't use `JSON.stringify` here since it's non-deterministic,\n      // and can lead to different store key names being created even though\n      // the `args` object used during creation has the same properties/values.\n      const stringifiedArgs: string = storeKeyNameStringify(args);\n      completeFieldName += `(${stringifiedArgs})`;\n    }\n\n    if (directives) {\n      Object.keys(directives).forEach((key) => {\n        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n        if (directives[key] && Object.keys(directives[key]).length) {\n          completeFieldName += `@${key}(${storeKeyNameStringify(\n            directives[key]\n          )})`;\n        } else {\n          completeFieldName += `@${key}`;\n        }\n      });\n    }\n\n    return completeFieldName;\n  },\n  {\n    setStringify(s: typeof storeKeyNameStringify) {\n      const previous = storeKeyNameStringify;\n      storeKeyNameStringify = s;\n      return previous;\n    },\n  }\n);\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === \"Field\";\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode\n): selection is InlineFragmentNode {\n  return selection.kind === \"InlineFragment\";\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"]},"metadata":{},"sourceType":"module"}