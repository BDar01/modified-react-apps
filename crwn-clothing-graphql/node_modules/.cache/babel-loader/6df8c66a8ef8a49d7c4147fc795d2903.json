{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK, Kind } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === \"Variable\") {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      invariant(evaledValue !== void 0, 78, directive.name.value);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function (node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  }); // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      invariant(directiveArguments && directiveArguments.length === 1, 79, directiveName);\n      var ifArgument = directiveArguments[0];\n      invariant(ifArgument.name && ifArgument.name.value === \"if\", 80, directiveName);\n      var ifValue = ifArgument.value; // means it has to be a variable value if this is a valid @skip or @include directive\n\n      invariant(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 81, directiveName);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}\n/** @internal */\n\nexport function getFragmentMaskMode(fragment) {\n  var _a, _b;\n\n  var directive = (_a = fragment.directives) === null || _a === void 0 ? void 0 : _a.find(function (_a) {\n    var name = _a.name;\n    return name.value === \"unmask\";\n  });\n\n  if (!directive) {\n    return \"mask\";\n  }\n\n  var modeArg = (_b = directive.arguments) === null || _b === void 0 ? void 0 : _b.find(function (_a) {\n    var name = _a.name;\n    return name.value === \"mode\";\n  });\n\n  if (globalThis.__DEV__ !== false) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        globalThis.__DEV__ !== false && invariant.warn(82);\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        globalThis.__DEV__ !== false && invariant.warn(83);\n      } else if (modeArg.value.value !== \"migrate\") {\n        globalThis.__DEV__ !== false && invariant.warn(84, modeArg.value.value);\n      }\n    }\n  }\n\n  if (modeArg && \"value\" in modeArg.value && modeArg.value.value === \"migrate\") {\n    return \"migrate\";\n  }\n\n  return \"unmask\";\n}","map":{"version":3,"mappings":"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","names":["invariant","visit","BREAK","Kind","shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","getDirectiveNames","root","names","Directive","node","push","hasAnyDirectives","hasAllDirectives","hasDirectives","all","nameSet","Set","uniqueCount","size","delete","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue","getFragmentMaskMode","fragment","find","modeArg","_b","globalThis","VARIABLE","STRING"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit, BREAK, Kind } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n/** @internal */\nexport function getFragmentMaskMode(\n  fragment: FragmentSpreadNode\n): \"mask\" | \"migrate\" | \"unmask\" {\n  const directive = fragment.directives?.find(\n    ({ name }) => name.value === \"unmask\"\n  );\n\n  if (!directive) {\n    return \"mask\";\n  }\n\n  const modeArg = directive.arguments?.find(\n    ({ name }) => name.value === \"mode\"\n  );\n\n  if (__DEV__) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        invariant.warn(\"@unmask 'mode' argument does not support variables.\");\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        invariant.warn(\"@unmask 'mode' argument must be of type string.\");\n      } else if (modeArg.value.value !== \"migrate\") {\n        invariant.warn(\n          \"@unmask 'mode' argument does not recognize value '%s'.\",\n          modeArg.value.value\n        );\n      }\n    }\n  }\n\n  if (\n    modeArg &&\n    \"value\" in modeArg.value &&\n    modeArg.value.value === \"migrate\"\n  ) {\n    return \"migrate\";\n  }\n\n  return \"unmask\";\n}\n"]},"metadata":{},"sourceType":"module"}