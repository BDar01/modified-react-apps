{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { cacheSizes } from \"./sizes.js\";\nvar globalCaches = {};\nexport function registerGlobalCache(name, getSize) {\n  globalCaches[name] = getSize;\n}\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\n\nexport var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ? _getApolloClientMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\n\nexport var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ? _getInMemoryCacheMemoryInternals : undefined;\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\n\nexport var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ? _getApolloCacheMemoryInternals : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  var defaults = {\n    parser: 1000\n    /* defaultCacheSizes[\"parser\"] */\n    ,\n    canonicalStringify: 1000\n    /* defaultCacheSizes[\"canonicalStringify\"] */\n    ,\n    print: 2000\n    /* defaultCacheSizes[\"print\"] */\n    ,\n    \"documentTransform.cache\": 2000\n    /* defaultCacheSizes[\"documentTransform.cache\"] */\n    ,\n    \"queryManager.getDocumentInfo\": 2000\n    /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */\n    ,\n    \"PersistedQueryLink.persistedQueryHashes\": 2000\n    /* defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"] */\n    ,\n    \"fragmentRegistry.transform\": 2000\n    /* defaultCacheSizes[\"fragmentRegistry.transform\"] */\n    ,\n    \"fragmentRegistry.lookup\": 1000\n    /* defaultCacheSizes[\"fragmentRegistry.lookup\"] */\n    ,\n    \"fragmentRegistry.findFragmentSpreads\": 4000\n    /* defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"] */\n    ,\n    \"cache.fragmentQueryDocuments\": 1000\n    /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */\n    ,\n    \"removeTypenameFromVariables.getVariableDefinitions\": 2000\n    /* defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"] */\n    ,\n    \"inMemoryCache.maybeBroadcastWatch\": 5000\n    /* defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] */\n    ,\n    \"inMemoryCache.executeSelectionSet\": 50000\n    /* defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"] */\n    ,\n    \"inMemoryCache.executeSubSelectedArray\": 10000\n    /* defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"] */\n\n  };\n  return Object.fromEntries(Object.entries(defaults).map(function (_a) {\n    var k = _a[0],\n        v = _a[1];\n    return [k, cacheSizes[k] || v];\n  }));\n}\n\nfunction _getApolloClientMemoryInternals() {\n  var _a, _b, _c, _d, _e;\n\n  if (!(globalThis.__DEV__ !== false)) throw new Error(\"only supported in development mode\");\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: __assign({\n      print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches),\n      parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches),\n      canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(this[\"queryManager\"].documentTransform)\n      }\n    }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d))\n  };\n}\n\nfunction _getApolloCacheMemoryInternals() {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"])\n    }\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals() {\n  var fragments = this.config.fragments;\n  return __assign(__assign({}, _getApolloCacheMemoryInternals.apply(this)), {\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(this[\"storeReader\"][\"executeSelectionSet\"]),\n      executeSubSelectedArray: getWrapperInformation(this[\"storeReader\"][\"executeSubSelectedArray\"]),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"])\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),\n      lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),\n      transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform)\n    }\n  });\n}\n\nfunction isWrapper(f) {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined(value) {\n  return value != null;\n}\n\nfunction transformInfo(transform) {\n  return recurseTransformInfo(transform).map(function (cache) {\n    return {\n      cache: cache\n    };\n  });\n}\n\nfunction recurseTransformInfo(transform) {\n  return transform ? __spreadArray(__spreadArray([getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform[\"performWork\"])], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"left\"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform[\"right\"]), true).filter(isDefined) : [];\n}\n\nfunction linkInfo(link) {\n  var _a;\n\n  return link ? __spreadArray(__spreadArray([(_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined) : [];\n}","map":{"version":3,"mappings":"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","names":["cacheSizes","globalCaches","registerGlobalCache","name","getSize","getApolloClientMemoryInternals","globalThis","_getApolloClientMemoryInternals","undefined","getInMemoryCacheMemoryInternals","_getInMemoryCacheMemoryInternals","getApolloCacheMemoryInternals","_getApolloCacheMemoryInternals","getCurrentCacheSizes","defaults","parser","canonicalStringify","print","Object","fromEntries","entries","map","_a","k","v","Error","limits","sizes","_b","_c","links","linkInfo","link","queryManager","getDocumentInfo","size","documentTransforms","transformInfo","documentTransform","cache","getMemoryInternals","_e","fragmentQueryDocuments","getWrapperInformation","fragments","config","apply","addTypenameDocumentTransform","inMemoryCache","executeSelectionSet","executeSubSelectedArray","maybeBroadcastWatch","fragmentRegistry","findFragmentSpreads","lookup","transform","isWrapper","f","isDefined","value","recurseTransformInfo","__spreadArray","filter","left","right"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/caching/getMemoryInternals.ts"],"sourcesContent":["import type { OptimisticWrapperFunction } from \"optimism\";\nimport type {\n  InMemoryCache,\n  DocumentTransform,\n  ApolloLink,\n  ApolloCache,\n} from \"../../core/index.js\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport type { CacheSizes } from \"./sizes.js\";\nimport { cacheSizes, defaultCacheSizes } from \"./sizes.js\";\n\nconst globalCaches: {\n  print?: () => number;\n  parser?: () => number;\n  canonicalStringify?: () => number;\n} = {};\n\nexport function registerGlobalCache(\n  name: keyof typeof globalCaches,\n  getSize: () => number\n) {\n  globalCaches[name] = getSize;\n}\n\n/**\n * Transformative helper type to turn a function of the form\n * ```ts\n * (this: any) => R\n * ```\n * into a function of the form\n * ```ts\n * () => R\n * ```\n * preserving the return type, but removing the `this` parameter.\n *\n * @remarks\n *\n * Further down in the definitions of `_getApolloClientMemoryInternals`,\n * `_getApolloCacheMemoryInternals` and `_getInMemoryCacheMemoryInternals`,\n * having the `this` parameter annotation is extremely useful for type checking\n * inside the function.\n *\n * If this is preserved in the exported types, though, it leads to a situation\n * where `ApolloCache.getMemoryInternals` is a function that requires a `this`\n * of the type `ApolloCache`, while the extending class `InMemoryCache` has a\n * `getMemoryInternals` function that requires a `this` of the type\n * `InMemoryCache`.\n * This is not compatible with TypeScript's inheritence system (although it is\n * perfectly correct), and so TypeScript will complain loudly.\n *\n * We still want to define our functions with the `this` annotation, though,\n * and have the return type inferred.\n * (This requirement for return type inference here makes it impossible to use\n * a function overload that is more explicit on the inner overload than it is\n * on the external overload.)\n *\n * So in the end, we use this helper to remove the `this` annotation from the\n * exported function types, while keeping it in the internal implementation.\n *\n */\ntype RemoveThis<T> = T extends (this: any) => infer R ? () => R : never;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloClientMemoryInternals =\n  __DEV__ ?\n    (_getApolloClientMemoryInternals as RemoveThis<\n      typeof _getApolloClientMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getInMemoryCacheMemoryInternals =\n  __DEV__ ?\n    (_getInMemoryCacheMemoryInternals as RemoveThis<\n      typeof _getInMemoryCacheMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloCacheMemoryInternals =\n  __DEV__ ?\n    (_getApolloCacheMemoryInternals as RemoveThis<\n      typeof _getApolloCacheMemoryInternals\n    >)\n  : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults: Record<keyof CacheSizes, number> = {\n    parser: defaultCacheSizes[\"parser\"],\n    canonicalStringify: defaultCacheSizes[\"canonicalStringify\"],\n    print: defaultCacheSizes[\"print\"],\n    \"documentTransform.cache\": defaultCacheSizes[\"documentTransform.cache\"],\n    \"queryManager.getDocumentInfo\":\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"],\n    \"PersistedQueryLink.persistedQueryHashes\":\n      defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"],\n    \"fragmentRegistry.transform\":\n      defaultCacheSizes[\"fragmentRegistry.transform\"],\n    \"fragmentRegistry.lookup\": defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    \"fragmentRegistry.findFragmentSpreads\":\n      defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    \"cache.fragmentQueryDocuments\":\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    \"removeTypenameFromVariables.getVariableDefinitions\":\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    \"inMemoryCache.maybeBroadcastWatch\":\n      defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n    \"inMemoryCache.executeSelectionSet\":\n      defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n    \"inMemoryCache.executeSubSelectedArray\":\n      defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n  };\n  return Object.fromEntries(\n    Object.entries(defaults).map(([k, v]) => [\n      k,\n      cacheSizes[k as keyof CacheSizes] || v,\n    ])\n  );\n}\n\nfunction _getApolloClientMemoryInternals(this: ApolloClient<any>) {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      parser: globalCaches.parser?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(\n          this[\"queryManager\"].documentTransform\n        ),\n      },\n      ...(this.cache.getMemoryInternals?.() as Partial<\n        ReturnType<typeof _getApolloCacheMemoryInternals>\n      > &\n        Partial<ReturnType<typeof _getInMemoryCacheMemoryInternals>>),\n    },\n  };\n}\n\nfunction _getApolloCacheMemoryInternals(this: ApolloCache<any>) {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n    },\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals(this: InMemoryCache) {\n  const fragments = this.config.fragments as\n    | undefined\n    | {\n        findFragmentSpreads?: Function;\n        transform?: Function;\n        lookup?: Function;\n      };\n\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this as any),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(\n        this[\"storeReader\"][\"executeSelectionSet\"]\n      ),\n      executeSubSelectedArray: getWrapperInformation(\n        this[\"storeReader\"][\"executeSubSelectedArray\"]\n      ),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(\n        fragments?.findFragmentSpreads\n      ),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform),\n    },\n  };\n}\n\nfunction isWrapper(f?: Function): f is OptimisticWrapperFunction<any, any> {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f?: Function) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\nfunction transformInfo(transform?: DocumentTransform) {\n  return recurseTransformInfo(transform).map((cache) => ({ cache }));\n}\n\nfunction recurseTransformInfo(transform?: DocumentTransform): number[] {\n  return transform ?\n      [\n        getWrapperInformation(transform?.[\"performWork\"]),\n        ...recurseTransformInfo(transform?.[\"left\"]),\n        ...recurseTransformInfo(transform?.[\"right\"]),\n      ].filter(isDefined)\n    : [];\n}\n\nfunction linkInfo(link?: ApolloLink): unknown[] {\n  return link ?\n      [\n        link?.getMemoryInternals?.(),\n        ...linkInfo(link?.left),\n        ...linkInfo(link?.right),\n      ].filter(isDefined)\n    : [];\n}\n"]},"metadata":{},"sourceType":"module"}