{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, nextValue) {\n  return __awaiter(this, void 0, void 0, function () {\n    var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _a, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n\n    var _b, _c;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          if (TextDecoder === undefined) {\n            throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n          }\n\n          decoder = new TextDecoder(\"utf-8\");\n          contentType = (_d = response.headers) === null || _d === void 0 ? void 0 : _d.get(\"content-type\");\n          delimiter = \"boundary=\";\n          boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n          boundary = \"\\r\\n--\".concat(boundaryVal);\n          buffer = \"\";\n          iterator = responseIterator(response);\n          running = true;\n          _e.label = 1;\n\n        case 1:\n          if (!running) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , iterator.next()];\n\n        case 2:\n          _a = _e.sent(), value = _a.value, done = _a.done;\n          chunk = typeof value === \"string\" ? value : decoder.decode(value);\n          searchFrom = buffer.length - boundary.length + 1;\n          running = !done;\n          buffer += chunk;\n          bi = buffer.indexOf(boundary, searchFrom);\n\n          while (bi > -1) {\n            message = void 0;\n            _b = [buffer.slice(0, bi), buffer.slice(bi + boundary.length)], message = _b[0], buffer = _b[1];\n            i = message.indexOf(\"\\r\\n\\r\\n\");\n            headers = parseHeaders(message.slice(0, i));\n            contentType_1 = headers[\"content-type\"];\n\n            if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n              throw new Error(\"Unsupported patch content type: application/json is required.\");\n            }\n\n            body = message.slice(i);\n\n            if (body) {\n              result = parseJsonBody(response, body);\n\n              if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                if (isApolloPayloadResult(result)) {\n                  next = {};\n\n                  if (\"payload\" in result) {\n                    if (Object.keys(result).length === 1 && result.payload === null) {\n                      return [2\n                      /*return*/\n                      ];\n                    }\n\n                    next = __assign({}, result.payload);\n                  }\n\n                  if (\"errors\" in result) {\n                    next = __assign(__assign({}, next), {\n                      extensions: __assign(__assign({}, \"extensions\" in next ? next.extensions : null), (_c = {}, _c[PROTOCOL_ERRORS_SYMBOL] = result.errors, _c))\n                    });\n                  }\n\n                  nextValue(next);\n                } else {\n                  // for the last chunk with only `hasNext: false`\n                  // we don't need to call observer.next as there is no data/errors\n                  nextValue(result);\n                }\n              } else if ( // If the chunk contains only a \"hasNext: false\", we can call\n              // observer.complete() immediately.\n              Object.keys(result).length === 1 && \"hasNext\" in result && !result.hasNext) {\n                return [2\n                /*return*/\n                ];\n              }\n            }\n\n            bi = buffer.indexOf(boundary);\n          }\n\n          return [3\n          /*break*/\n          , 1];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\nexport function parseHeaders(headerText) {\n  var headersInit = {};\n  headerText.split(\"\\n\").forEach(function (line) {\n    var i = line.indexOf(\":\");\n\n    if (i > -1) {\n      // normalize headers to lowercase\n      var name_1 = line.slice(0, i).trim().toLowerCase();\n      var value = line.slice(i + 1).trim();\n      headersInit[name_1] = value;\n    }\n  });\n  return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n  if (response.status >= 300) {\n    // Network error\n    var getResult = function () {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n\n    throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n  }\n\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    var parseError = err;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\nexport function handleError(err, observer) {\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next(err.result);\n  }\n\n  observer.error(err);\n}\nexport function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      return parseJsonBody(response, bodyText);\n    }).then(function (result) {\n      if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n        // Data error\n        throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName, \"'.\"));\n      }\n\n      return result;\n    });\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,QAAiC,uBAAjC;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,sBAAT,QAAuC,uBAAvC;AACA,SAASC,qBAAT,QAAsC,6CAAtC;AAGQ,kBAAc,GAAKC,MAAM,CAACC,SAAP,CAAgBC,cAAnC;AAQR,OAAM,SAAgBC,iBAAhB,CAEJC,QAFI,EAEgBC,SAFhB,EAE6C;;;;;;;;;;;AACjD,cAAIC,WAAW,KAAKC,SAApB,EAA+B;AAC7B,kBAAM,IAAIC,KAAJ,CACJ,2EADI,CAAN;AAGD;;AACKC,iBAAO,GAAG,IAAIH,WAAJ,CAAgB,OAAhB,CAAV;AACAI,qBAAW,GAAG,cAAQ,CAACC,OAAT,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEC,GAAF,CAAM,cAAN,CAA9B;AACAC,mBAAS,GAAG,WAAZ;AAMAC,qBAAW,GACf,YAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEC,QAAb,CAAsBF,SAAtB,KACEJ,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CACPO,SADJ,CACc,YAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEC,OAAb,CAAqBJ,SAArB,KAAkCA,SAAS,CAACK,MAD1D,EAEGC,OAFH,CAEW,OAFX,EAEoB,EAFpB,EAGGA,OAHH,CAGW,UAHX,EAGuB,EAHvB,EAIGC,IAJH,EADF,GAME,GAPE;AASAC,kBAAQ,GAAG,gBAASP,WAAT,CAAX;AACFQ,gBAAM,GAAG,EAAT;AACEC,kBAAQ,GAAG5B,gBAAgB,CAACQ,QAAD,CAA3B;AACFqB,iBAAO,GAAG,IAAV;;;;eAEGA,SAAO;AAAA;AAAA;AACY;AAAA;AAAA,YAAMD,QAAQ,CAACE,IAAT,EAAN;;;AAAlBC,eAAkBC,SAAlB,EAAEC,KAAK,WAAP,EAASC,IAAI,UAAb;AACAC,eAAK,GAAG,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCpB,OAAO,CAACuB,MAAR,CAAeH,KAAf,CAA5C;AACAI,oBAAU,GAAGV,MAAM,CAACJ,MAAP,GAAgBG,QAAQ,CAACH,MAAzB,GAAkC,CAA/C;AACNM,iBAAO,GAAG,CAACK,IAAX;AACAP,gBAAM,IAAIQ,KAAV;AACIG,YAAE,GAAGX,MAAM,CAACL,OAAP,CAAeI,QAAf,EAAyBW,UAAzB,CAAL;;AAEJ,iBAAOC,EAAE,GAAG,CAAC,CAAb,EAAgB;AACVC,mBAAO,SAAP;AACJC,iBAAoB,CAClBb,MAAM,CAACc,KAAP,CAAa,CAAb,EAAgBH,EAAhB,CADkB,EAElBX,MAAM,CAACc,KAAP,CAAaH,EAAE,GAAGZ,QAAQ,CAACH,MAA3B,CAFkB,CAApB,EAACgB,OAAO,QAAR,EAAUZ,MAAM,QAAhB;AAIMe,aAAC,GAAGH,OAAO,CAACjB,OAAR,CAAgB,UAAhB,CAAJ;AACAP,mBAAO,GAAG4B,YAAY,CAACJ,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBC,CAAjB,CAAD,CAAtB;AACAE,4BAAc7B,OAAO,CAAC,cAAD,CAArB;;AACN,gBACE6B,aAAW,IACXA,aAAW,CAACC,WAAZ,GAA0BvB,OAA1B,CAAkC,kBAAlC,MAA0D,CAAC,CAF7D,EAGE;AACA,oBAAM,IAAIV,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAGKkC,gBAAI,GAAGP,OAAO,CAACE,KAAR,CAAcC,CAAd,CAAP;;AAEN,gBAAII,IAAJ,EAAU;AACFC,oBAAM,GAAGC,aAAa,CAAIxC,QAAJ,EAAcsC,IAAd,CAAtB;;AACN,kBACE1C,MAAM,CAAC6C,IAAP,CAAYF,MAAZ,EAAoBxB,MAApB,GAA6B,CAA7B,IACA,UAAUwB,MADV,IAEA,iBAAiBA,MAFjB,IAGA,YAAYA,MAHZ,IAIA,aAAaA,MALf,EAME;AACA,oBAAI5C,qBAAqB,CAAC4C,MAAD,CAAzB,EAAmC;AAC7BjB,sBAAI,GAAG,EAAP;;AACJ,sBAAI,aAAaiB,MAAjB,EAAyB;AACvB,wBAAI3C,MAAM,CAAC6C,IAAP,CAAYF,MAAZ,EAAoBxB,MAApB,KAA+B,CAA/B,IAAoCwB,MAAM,CAACG,OAAP,KAAmB,IAA3D,EAAiE;AAC/D;AAAA;AAAA;AACD;;AACDpB,wBAAI,gBAAQiB,MAAM,CAACG,OAAf,CAAJ;AACD;;AACD,sBAAI,YAAYH,MAAhB,EAAwB;AACtBjB,wBAAI,yBACCA,IADD,GACK;AACPqB,gCAAU,wBACJ,gBAAgBrB,IAAhB,GAAuBA,IAAI,CAACqB,UAA5B,GAA0C,IADtC,IACmDC,YAC1DlD,sBAD0D,IACjC6C,MAAM,CAACM,MAD0B,EACpBD,EAF/B;AADH,qBADL,CAAJ;AAOD;;AACD3C,2BAAS,CAACqB,IAAD,CAAT;AACD,iBAlBD,MAkBO;AACL;AACA;AACArB,2BAAS,CAACsC,MAAD,CAAT;AACD;AACF,eA9BD,MA8BO,KACL;AACA;AACA3C,oBAAM,CAAC6C,IAAP,CAAYF,MAAZ,EAAoBxB,MAApB,KAA+B,CAA/B,IACA,aAAawB,MADb,IAEA,CAACA,MAAM,CAACO,OALH,EAML;AACA;AAAA;AAAA;AACD;AACF;;AACDhB,cAAE,GAAGX,MAAM,CAACL,OAAP,CAAeI,QAAf,CAAL;AACD;;;;;;;;;;;;;AAEJ;AAED,OAAM,SAAUiB,YAAV,CAAuBY,UAAvB,EAAyC;AAC7C,MAAMC,WAAW,GAA2B,EAA5C;AACAD,YAAU,CAACE,KAAX,CAAiB,IAAjB,EAAuBC,OAAvB,CAA+B,UAACC,IAAD,EAAK;AAClC,QAAMjB,CAAC,GAAGiB,IAAI,CAACrC,OAAL,CAAa,GAAb,CAAV;;AACA,QAAIoB,CAAC,GAAG,CAAC,CAAT,EAAY;AACV;AACA,UAAMkB,MAAI,GAAGD,IAAI,CAAClB,KAAL,CAAW,CAAX,EAAcC,CAAd,EAAiBjB,IAAjB,GAAwBoB,WAAxB,EAAb;AACA,UAAMZ,KAAK,GAAG0B,IAAI,CAAClB,KAAL,CAAWC,CAAC,GAAG,CAAf,EAAkBjB,IAAlB,EAAd;AACA+B,iBAAW,CAACI,MAAD,CAAX,GAAoB3B,KAApB;AACD;AACF,GARD;AASA,SAAOuB,WAAP;AACD;AAED,OAAM,SAAUR,aAAV,CAA2BxC,QAA3B,EAA+CqD,QAA/C,EAA+D;AACnE,MAAIrD,QAAQ,CAACsD,MAAT,IAAmB,GAAvB,EAA4B;AAC1B;AACA,QAAMC,SAAS,GAAG;AAChB,UAAI;AACF,eAAOC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAP;AACD,OAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,eAAOL,QAAP;AACD;AACF,KAND;;AAOA5D,oBAAgB,CACdO,QADc,EAEduD,SAAS,EAFK,EAGd,wDAAiDvD,QAAQ,CAACsD,MAA1D,CAHc,CAAhB;AAKD;;AAED,MAAI;AACF,WAAOE,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAP;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,QAAMC,UAAU,GAAGD,GAAnB;AACAC,cAAU,CAACC,IAAX,GAAkB,kBAAlB;AACAD,cAAU,CAAC3D,QAAX,GAAsBA,QAAtB;AACA2D,cAAU,CAACE,UAAX,GAAwB7D,QAAQ,CAACsD,MAAjC;AACAK,cAAU,CAACN,QAAX,GAAsBA,QAAtB;AACA,UAAMM,UAAN;AACD;AACF;AAED,OAAM,SAAUG,WAAV,CAAsBJ,GAAtB,EAAgCK,QAAhC,EAAmE;AACvE;AACA;AACA;AACA;AACA;AACA,MAAIL,GAAG,CAACnB,MAAJ,IAAcmB,GAAG,CAACnB,MAAJ,CAAWM,MAAzB,IAAmCa,GAAG,CAACnB,MAAJ,CAAWyB,IAAlD,EAAwD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,YAAQ,CAACzC,IAAT,CAAcoC,GAAG,CAACnB,MAAlB;AACD;;AAEDwB,UAAQ,CAACE,KAAT,CAAeP,GAAf;AACD;AAED,OAAM,SAAUQ,yBAAV,CAAoCC,UAApC,EAAuE;AAC3E,SAAO,UAACnE,QAAD,EAAmB;AACxB,mBAAQ,CACLoE,IADH,GAEGC,IAFH,CAEQ,UAAChB,QAAD,EAAS;AAAK,0BAAa,CAACrD,QAAD,EAAWqD,QAAX,CAAb;AAAiC,KAFvD,EAGGgB,IAHH,CAGQ,UAAC9B,MAAD,EAAY;AAChB,UACE,CAAC+B,KAAK,CAACC,OAAN,CAAchC,MAAd,CAAD,IACA,CAACzC,cAAc,CAAC0E,IAAf,CAAoBjC,MAApB,EAA4B,MAA5B,CADD,IAEA,CAACzC,cAAc,CAAC0E,IAAf,CAAoBjC,MAApB,EAA4B,QAA5B,CAHH,EAIE;AACA;AACA9C,wBAAgB,CACdO,QADc,EAEduC,MAFc,EAGd,iDACE+B,KAAK,CAACC,OAAN,CAAcJ,UAAd,IACEA,UAAU,CAACM,GAAX,CAAe,UAACC,EAAD,EAAG;AAAK,mBAAE,CAACC,aAAH;AAAgB,SAAvC,CADF,GAEER,UAAU,CAACQ,aAHf,EAG4B,IAH5B,CAHc,CAAhB;AASD;;AACD,aAAOpC,MAAP;AACD,KArBH;AAqBI,GAtBN;AAuBD","names":["responseIterator","throwServerError","PROTOCOL_ERRORS_SYMBOL","isApolloPayloadResult","Object","prototype","hasOwnProperty","readMultipartBody","response","nextValue","TextDecoder","undefined","Error","decoder","contentType","headers","_d","get","delimiter","boundaryVal","includes","substring","indexOf","length","replace","trim","boundary","buffer","iterator","running","next","_a","_e","value","done","chunk","decode","searchFrom","bi","message","_b","slice","i","parseHeaders","contentType_1","toLowerCase","body","result","parseJsonBody","keys","payload","extensions","_c","errors","hasNext","headerText","headersInit","split","forEach","line","name_1","bodyText","status","getResult","JSON","parse","err","parseError","name","statusCode","handleError","observer","data","error","parseAndCheckHttpResponse","operations","text","then","Array","isArray","call","map","op","operationName"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts"],"sourcesContent":["import { responseIterator } from \"./responseIterator.js\";\nimport type { Operation } from \"../core/index.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nimport type { SubscriptionObserver } from \"zen-observable-ts\";\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport async function readMultipartBody<\n  T extends object = Record<string, unknown>,\n>(response: Response, nextValue: (value: T) => void) {\n  if (TextDecoder === undefined) {\n    throw new Error(\n      \"TextDecoder must be defined in the environment: please import a polyfill.\"\n    );\n  }\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get(\"content-type\");\n  const delimiter = \"boundary=\";\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const boundaryVal =\n    contentType?.includes(delimiter) ?\n      contentType\n        ?.substring(contentType?.indexOf(delimiter) + delimiter.length)\n        .replace(/['\"]/g, \"\")\n        .replace(/\\;(.*)/gm, \"\")\n        .trim()\n    : \"-\";\n\n  const boundary = `\\r\\n--${boundaryVal}`;\n  let buffer = \"\";\n  const iterator = responseIterator(response);\n  let running = true;\n\n  while (running) {\n    const { value, done } = await iterator.next();\n    const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n    const searchFrom = buffer.length - boundary.length + 1;\n    running = !done;\n    buffer += chunk;\n    let bi = buffer.indexOf(boundary, searchFrom);\n\n    while (bi > -1) {\n      let message: string;\n      [message, buffer] = [\n        buffer.slice(0, bi),\n        buffer.slice(bi + boundary.length),\n      ];\n      const i = message.indexOf(\"\\r\\n\\r\\n\");\n      const headers = parseHeaders(message.slice(0, i));\n      const contentType = headers[\"content-type\"];\n      if (\n        contentType &&\n        contentType.toLowerCase().indexOf(\"application/json\") === -1\n      ) {\n        throw new Error(\n          \"Unsupported patch content type: application/json is required.\"\n        );\n      }\n      // nb: Technically you'd want to slice off the beginning \"\\r\\n\" but since\n      // this is going to be `JSON.parse`d there is no need.\n      const body = message.slice(i);\n\n      if (body) {\n        const result = parseJsonBody<T>(response, body);\n        if (\n          Object.keys(result).length > 1 ||\n          \"data\" in result ||\n          \"incremental\" in result ||\n          \"errors\" in result ||\n          \"payload\" in result\n        ) {\n          if (isApolloPayloadResult(result)) {\n            let next = {};\n            if (\"payload\" in result) {\n              if (Object.keys(result).length === 1 && result.payload === null) {\n                return;\n              }\n              next = { ...result.payload };\n            }\n            if (\"errors\" in result) {\n              next = {\n                ...next,\n                extensions: {\n                  ...(\"extensions\" in next ? next.extensions : (null as any)),\n                  [PROTOCOL_ERRORS_SYMBOL]: result.errors,\n                },\n              };\n            }\n            nextValue(next as T);\n          } else {\n            // for the last chunk with only `hasNext: false`\n            // we don't need to call observer.next as there is no data/errors\n            nextValue(result);\n          }\n        } else if (\n          // If the chunk contains only a \"hasNext: false\", we can call\n          // observer.complete() immediately.\n          Object.keys(result).length === 1 &&\n          \"hasNext\" in result &&\n          !result.hasNext\n        ) {\n          return;\n        }\n      }\n      bi = buffer.indexOf(boundary);\n    }\n  }\n}\n\nexport function parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nexport function parseJsonBody<T>(response: Response, bodyText: string): T {\n  if (response.status >= 300) {\n    // Network error\n    const getResult = (): Record<string, unknown> | string => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(\n      response,\n      getResult(),\n      `Response not successful: Received status code ${response.status}`\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText) as T;\n  } catch (err) {\n    const parseError = err as ServerParseError;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\n\nexport function handleError(err: any, observer: SubscriptionObserver<any>) {\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next(err.result);\n  }\n\n  observer.error(err);\n}\n\nexport function parseAndCheckHttpResponse(operations: Operation | Operation[]) {\n  return (response: Response) =>\n    response\n      .text()\n      .then((bodyText) => parseJsonBody(response, bodyText))\n      .then((result: any) => {\n        if (\n          !Array.isArray(result) &&\n          !hasOwnProperty.call(result, \"data\") &&\n          !hasOwnProperty.call(result, \"errors\")\n        ) {\n          // Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations) ?\n                operations.map((op) => op.operationName)\n              : operations.operationName\n            }'.`\n          );\n        }\n        return result;\n      });\n}\n"]},"metadata":{},"sourceType":"module"}