{"ast":null,"code":"import { print as origPrint } from \"graphql\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\nvar printCache;\nexport var print = Object.assign(function (ast) {\n  var result = printCache.get(ast);\n\n  if (!result) {\n    result = origPrint(ast);\n    printCache.set(ast, result);\n  }\n\n  return result;\n}, {\n  reset: function () {\n    printCache = new AutoCleanedWeakCache(cacheSizes.print || 2000\n    /* defaultCacheSizes.print */\n    );\n  }\n});\nprint.reset();\n\nif (globalThis.__DEV__ !== false) {\n  registerGlobalCache(\"print\", function () {\n    return printCache ? printCache.size : 0;\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,KAAK,IAAIC,SAAlB,QAAmC,SAAnC;AACA,SACEC,oBADF,EAEEC,UAFF,QAIO,qBAJP;AAKA,SAASC,mBAAT,QAAoC,kCAApC;AAEA,IAAIC,UAAJ;AACA,OAAO,IAAML,KAAK,GAAGM,MAAM,CAACC,MAAP,CACnB,UAACC,GAAD,EAAa;AACX,MAAIC,MAAM,GAAGJ,UAAU,CAACK,GAAX,CAAeF,GAAf,CAAb;;AAEA,MAAI,CAACC,MAAL,EAAa;AACXA,UAAM,GAAGR,SAAS,CAACO,GAAD,CAAlB;AACAH,cAAU,CAACM,GAAX,CAAeH,GAAf,EAAoBC,MAApB;AACD;;AACD,SAAOA,MAAP;AACD,CATkB,EAUnB;AACEG,OAAK;AACHP,cAAU,GAAG,IAAIH,oBAAJ,CACXC,UAAU,CAACH,KAAX,IAAgB;AAAA;AADL,KAAb;AAGD;AALH,CAVmB,CAAd;AAkBPA,KAAK,CAACY,KAAN;;AAEA,IAAIC,UAAU,QAAV,KAAU,KAAd,EAAc;AACZT,qBAAmB,CAAC,OAAD,EAAU;AAAM,WAACC,UAAU,GAAGA,UAAU,CAACS,IAAd,GAAqB,CAAhC;AAAkC,GAAlD,CAAnB;AACD","names":["print","origPrint","AutoCleanedWeakCache","cacheSizes","registerGlobalCache","printCache","Object","assign","ast","result","get","set","reset","globalThis","size"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/graphql/print.ts"],"sourcesContent":["import type { ASTNode } from \"graphql\";\nimport { print as origPrint } from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n\nlet printCache!: AutoCleanedWeakCache<ASTNode, string>;\nexport const print = Object.assign(\n  (ast: ASTNode) => {\n    let result = printCache.get(ast);\n\n    if (!result) {\n      result = origPrint(ast);\n      printCache.set(ast, result);\n    }\n    return result;\n  },\n  {\n    reset() {\n      printCache = new AutoCleanedWeakCache<ASTNode, string>(\n        cacheSizes.print || defaultCacheSizes.print\n      );\n    },\n  }\n);\nprint.reset();\n\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => (printCache ? printCache.size : 0));\n}\n"]},"metadata":{},"sourceType":"module"}