{"ast":null,"code":"import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  const len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nexport class Entry {\n  constructor(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n\n  peek() {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  } // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  recompute(args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  }\n\n  setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    reportDirty(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  }\n\n  dispose() {\n    this.setDirty(); // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n\n    forgetChildren(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  dependOn(dep) {\n    dep.add(this);\n\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n\n    this.deps.add(dep);\n  }\n\n  forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n\n}\nEntry.count = 0;\n\nfunction rememberParent(child) {\n  const parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true;\n  const {\n    normalizeResult\n  } = entry;\n  let oldValueCopy;\n\n  if (normalizeResult && entry.value.length === 1) {\n    oldValueCopy = valueCopy(entry.value);\n  } // Make entry.value an empty array, representing an unknown value.\n\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args); // If we have a viable oldValueCopy to compare with the (successfully\n    // recomputed) new entry.value, and they are not already === identical, give\n    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n    // and/or entry.value[0] to determine the final cached entry.value.\n\n    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n      try {\n        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n      } catch (_a) {// If normalizeResult throws, just use the newer value, rather than\n        // saving the exception as entry.value[1].\n      }\n    }\n  } catch (e) {\n    // If entry.fn throws, entry.value will hold that exception.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(child, callback) {\n  const parentCount = child.parents.size;\n\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child); // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  const childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  const dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  } // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n\n\n  parent.forgetDeps(); // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["parentEntrySlot","maybeUnsubscribe","arrayFromSet","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","value","valueCopy","slice","Entry","constructor","fn","Set","Map","count","peek","mightBeDirty","rememberParent","recompute","args","recomputing","reallyRecompute","setDirty","dirty","reportDirty","dispose","forgetChildren","eachParent","parent","child","forgetChild","forget","dependOn","dep","add","deps","pop","forgetDeps","forEach","delete","clear","push","getValue","parents","childValues","has","set","reportDirtyChild","reportCleanChild","entry","withValue","recomputeNewValue","maybeSubscribe","setClean","normalizeResult","oldValueCopy","apply","e","dirtyChildren","size","reportClean","callback","parentCount","i","parentWasClean","childValue","get","removeDirtyChild","dc","_value","subscribe","unsubscribe"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/optimism/src/entry.ts"],"sourcesContent":["import { parentEntrySlot } from \"./context.js\";\nimport { OptimisticWrapOptions } from \"./index.js\";\nimport { Dep } from \"./dep.js\";\nimport { maybeUnsubscribe, arrayFromSet, Unsubscribable } from \"./helpers.js\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public normalizeResult: OptimisticWrapOptions<TArgs, any, any, TValue>[\"normalizeResult\"];\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n\n  const { normalizeResult } = entry;\n  let oldValueCopy: Value<any> | undefined;\n  if (normalizeResult && entry.value.length === 1) {\n    oldValueCopy = valueCopy(entry.value);\n  }\n\n  // Make entry.value an empty array, representing an unknown value.\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n\n    // If we have a viable oldValueCopy to compare with the (successfully\n    // recomputed) new entry.value, and they are not already === identical, give\n    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n    // and/or entry.value[0] to determine the final cached entry.value.\n    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n      try {\n        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n      } catch {\n        // If normalizeResult throws, just use the newer value, rather than\n        // saving the exception as entry.value[1].\n      }\n    }\n\n  } catch (e) {\n    // If entry.fn throws, entry.value will hold that exception.\n    entry.value[1] = e;\n  }\n\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}