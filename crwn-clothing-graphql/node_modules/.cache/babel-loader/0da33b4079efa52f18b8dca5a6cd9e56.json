{"ast":null,"code":"function noop() {}\n\nconst defaultDispose = noop;\n\nconst _WeakRef = typeof WeakRef !== \"undefined\" ? WeakRef : function (value) {\n  return {\n    deref: () => value\n  };\n};\n\nconst _WeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\n\nconst _FinalizationRegistry = typeof FinalizationRegistry !== \"undefined\" ? FinalizationRegistry : function () {\n  return {\n    register: noop,\n    unregister: noop\n  };\n};\n\nconst finalizationBatchSize = 10024;\nexport class WeakCache {\n  constructor() {\n    let max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    let dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new _WeakMap();\n    this.newest = null;\n    this.oldest = null;\n    this.unfinalizedNodes = new Set();\n    this.finalizationScheduled = false;\n    this.size = 0;\n\n    this.finalize = () => {\n      const iterator = this.unfinalizedNodes.values();\n\n      for (let i = 0; i < finalizationBatchSize; i++) {\n        const node = iterator.next().value;\n        if (!node) break;\n        this.unfinalizedNodes.delete(node);\n        const key = node.key;\n        delete node.key;\n        node.keyRef = new _WeakRef(key);\n        this.registry.register(key, node, node);\n      }\n\n      if (this.unfinalizedNodes.size > 0) {\n        queueMicrotask(this.finalize);\n      } else {\n        this.finalizationScheduled = false;\n      }\n    };\n\n    this.registry = new _FinalizationRegistry(this.deleteNode.bind(this));\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  getNode(key) {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  set(key, value) {\n    let node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.scheduleFinalization(node);\n    this.map.set(key, node);\n    this.size++;\n    return node.value;\n  }\n\n  clean() {\n    while (this.oldest && this.size > this.max) {\n      this.deleteNode(this.oldest);\n    }\n  }\n\n  deleteNode(node) {\n    if (node === this.newest) {\n      this.newest = node.older;\n    }\n\n    if (node === this.oldest) {\n      this.oldest = node.newer;\n    }\n\n    if (node.newer) {\n      node.newer.older = node.older;\n    }\n\n    if (node.older) {\n      node.older.newer = node.newer;\n    }\n\n    this.size--;\n    const key = node.key || node.keyRef && node.keyRef.deref();\n    this.dispose(node.value, key);\n\n    if (!node.keyRef) {\n      this.unfinalizedNodes.delete(node);\n    } else {\n      this.registry.unregister(node);\n    }\n\n    if (key) this.map.delete(key);\n  }\n\n  delete(key) {\n    const node = this.map.get(key);\n\n    if (node) {\n      this.deleteNode(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  scheduleFinalization(node) {\n    this.unfinalizedNodes.add(node);\n\n    if (!this.finalizationScheduled) {\n      this.finalizationScheduled = true;\n      queueMicrotask(this.finalize);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["noop","defaultDispose","_WeakRef","WeakRef","value","deref","_WeakMap","WeakMap","Map","_FinalizationRegistry","FinalizationRegistry","register","unregister","finalizationBatchSize","WeakCache","constructor","max","Infinity","dispose","Set","iterator","unfinalizedNodes","values","i","node","next","delete","key","keyRef","registry","size","queueMicrotask","finalize","finalizationScheduled","deleteNode","bind","has","map","get","getNode","newest","older","newer","oldest","set","scheduleFinalization","clean","add"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@wry/caches/src/weak.ts"],"sourcesContent":["import type { CommonCache } from \"./common\";\n\ninterface PartialNode<K extends object, V> {\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\ninterface UnfinalizedNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef?: undefined;\n  key: K;\n}\n\ninterface FullNode<K extends object, V> extends PartialNode<K, V> {\n  keyRef: WeakRef<K>;\n  key?: undefined;\n}\n\ntype Node<K extends object, V> = FullNode<K, V> | UnfinalizedNode<K, V>;\n\nfunction noop() {}\nconst defaultDispose = noop;\n\nconst _WeakRef =\n  typeof WeakRef !== \"undefined\"\n    ? WeakRef\n    : (function <T>(value: T) {\n        return { deref: () => value } satisfies Omit<\n          WeakRef<any>,\n          typeof Symbol.toStringTag\n        >;\n      } as any as typeof WeakRef);\nconst _WeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\nconst _FinalizationRegistry =\n  typeof FinalizationRegistry !== \"undefined\"\n    ? FinalizationRegistry\n    : (function <T>() {\n        return {\n          register: noop,\n          unregister: noop,\n        } satisfies Omit<FinalizationRegistry<T>, typeof Symbol.toStringTag>;\n      } as any as typeof FinalizationRegistry);\n\nconst finalizationBatchSize = 10024;\n\nexport class WeakCache<K extends object = any, V = any>\n  implements CommonCache<K, V>\n{\n  private map = new _WeakMap<K, Node<K, V>>();\n  private registry: FinalizationRegistry<Node<K, V>>;\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n  private unfinalizedNodes: Set<UnfinalizedNode<K, V>> = new Set();\n  private finalizationScheduled = false;\n  public size = 0;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key?: K) => void = defaultDispose\n  ) {\n    this.registry = new _FinalizationRegistry<Node<K, V>>(\n      this.deleteNode.bind(this)\n    );\n  }\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return (node.value = value);\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest,\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.scheduleFinalization(node);\n    this.map.set(key, node);\n    this.size++;\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.size > this.max) {\n      this.deleteNode(this.oldest);\n    }\n  }\n\n  private deleteNode(node: Node<K, V>) {\n    if (node === this.newest) {\n      this.newest = node.older;\n    }\n\n    if (node === this.oldest) {\n      this.oldest = node.newer;\n    }\n\n    if (node.newer) {\n      node.newer.older = node.older;\n    }\n\n    if (node.older) {\n      node.older.newer = node.newer;\n    }\n\n    this.size--;\n    const key = node.key || (node.keyRef && node.keyRef.deref());\n    this.dispose(node.value, key);\n    if (!node.keyRef) {\n      this.unfinalizedNodes.delete(node);\n    } else {\n      this.registry.unregister(node);\n    }\n    if (key) this.map.delete(key);\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      this.deleteNode(node);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  private scheduleFinalization(node: UnfinalizedNode<K, V>) {\n    this.unfinalizedNodes.add(node);\n    if (!this.finalizationScheduled) {\n      this.finalizationScheduled = true;\n      queueMicrotask(this.finalize);\n    }\n  }\n\n  private finalize = () => {\n    const iterator = this.unfinalizedNodes.values();\n    for (let i = 0; i < finalizationBatchSize; i++) {\n      const node = iterator.next().value;\n      if (!node) break;\n      this.unfinalizedNodes.delete(node);\n      const key = node.key;\n      delete (node as unknown as FullNode<K, V>).key;\n      (node as unknown as FullNode<K, V>).keyRef = new _WeakRef(key);\n      this.registry.register(key, node, node);\n    }\n    if (this.unfinalizedNodes.size > 0) {\n      queueMicrotask(this.finalize);\n    } else {\n      this.finalizationScheduled = false;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}