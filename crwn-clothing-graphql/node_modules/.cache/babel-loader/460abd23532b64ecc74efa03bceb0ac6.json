{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from \"optimism\";\nimport { Observable, cacheSizes, getFragmentDefinition, getFragmentQueryDocument, mergeDeepArray } from \"../../utilities/index.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { maskFragment } from \"../../masking/index.js\";\n\nvar ApolloCache =\n/** @class */\nfunction () {\n  function ApolloCache() {\n    this.assumeImmutableResults = false; // Make sure we compute the same (===) fragment query document every\n    // time we receive the same fragment in readFragment.\n\n    this.getFragmentDoc = wrap(getFragmentQueryDocument, {\n      max: cacheSizes[\"cache.fragmentQueryDocuments\"] || 1000\n      /* defaultCacheSizes[\"cache.fragmentQueryDocuments\"] */\n      ,\n      cache: WeakCache\n    });\n  } // Function used to lookup a fragment when a fragment definition is not part\n  // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n  // that register fragments ahead of time so they can be referenced by name.\n\n\n  ApolloCache.prototype.lookupFragment = function (fragmentName) {\n    return null;\n  }; // Transactional API\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n\n\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  }; // Optional API\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  }; // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  }; // DataProxy API\n\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic: optimistic\n    }));\n  };\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n\n\n  ApolloCache.prototype.watchFragment = function (options) {\n    var _this = this;\n\n    var fragment = options.fragment,\n        fragmentName = options.fragmentName,\n        from = options.from,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        otherOptions = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n\n    var query = this.getFragmentDoc(fragment, fragmentName); // While our TypeScript types do not allow for `undefined` as a valid\n    // `from`, its possible `useFragment` gives us an `undefined` since it\n    // calls` cache.identify` and provides that value to `from`. We are\n    // adding this fix here however to ensure those using plain JavaScript\n    // and using `cache.identify` themselves will avoid seeing the obscure\n    // warning.\n\n    var id = typeof from === \"undefined\" || typeof from === \"string\" ? from : this.identify(from);\n    var dataMasking = !!options[Symbol.for(\"apollo.dataMasking\")];\n\n    if (globalThis.__DEV__ !== false) {\n      var actualFragmentName = fragmentName || getFragmentDefinition(fragment).name.value;\n\n      if (!id) {\n        globalThis.__DEV__ !== false && invariant.warn(1, actualFragmentName);\n      }\n    }\n\n    var diffOptions = __assign(__assign({}, otherOptions), {\n      returnPartialData: true,\n      id: id,\n      query: query,\n      optimistic: optimistic\n    });\n\n    var latestDiff;\n    return new Observable(function (observer) {\n      return _this.watch(__assign(__assign({}, diffOptions), {\n        immediate: true,\n        callback: function (diff) {\n          var data = dataMasking ? maskFragment(diff.result, fragment, _this, fragmentName) : diff.result;\n\n          if ( // Always ensure we deliver the first result\n          latestDiff && equalByQuery(query, {\n            data: latestDiff === null || latestDiff === void 0 ? void 0 : latestDiff.result\n          }, {\n            data: data\n          })) {\n            return;\n          }\n\n          var result = {\n            data: data,\n            complete: !!diff.complete\n          };\n\n          if (diff.missing) {\n            result.missing = mergeDeepArray(diff.missing.map(function (error) {\n              return error.missing;\n            }));\n          }\n\n          latestDiff = __assign(__assign({}, diff), {\n            result: data\n          });\n          observer.next(result);\n        }\n      }));\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        options = __rest(_a, [\"id\", \"data\"]);\n\n    return this.write(Object.assign(options, {\n      dataId: id || \"ROOT_QUERY\",\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        fragment = _a.fragment,\n        fragmentName = _a.fragmentName,\n        options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.updateQuery = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readQuery(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  ApolloCache.prototype.updateFragment = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readFragment(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };\n\nif (globalThis.__DEV__ !== false) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}","map":{"version":3,"mappings":"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","names":["wrap","Observable","cacheSizes","getFragmentDefinition","getFragmentQueryDocument","mergeDeepArray","WeakCache","getApolloCacheMemoryInternals","equalByQuery","invariant","maskFragment","max","cache","ApolloCache","fragmentName","options","optimisticId","optimistic","updateResult","performTransaction","update","_this","transaction","document","object","read","__assign","rootId","id","from","_a","otherOptions","query","getFragmentDoc","fragment","identify","dataMasking","Symbol","for","globalThis","actualFragmentName","name","value","diffOptions","returnPartialData","latestDiff","observer","watch","immediate","callback","diff","data","result","complete","missing","map","error","next","write","Object","assign","dataId","batch","readQuery","writeQuery","readFragment","writeFragment","prototype","getMemoryInternals"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/cache/core/cache.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport type {\n  StoreObject,\n  Reference,\n  DeepPartial,\n  NoInfer,\n} from \"../../utilities/index.js\";\nimport {\n  Observable,\n  cacheSizes,\n  defaultCacheSizes,\n  getFragmentDefinition,\n  getFragmentQueryDocument,\n  mergeDeepArray,\n} from \"../../utilities/index.js\";\nimport type { DataProxy } from \"./types/DataProxy.js\";\nimport type { Cache } from \"./types/Cache.js\";\nimport { WeakCache } from \"@wry/caches\";\nimport { getApolloCacheMemoryInternals } from \"../../utilities/caching/getMemoryInternals.js\";\nimport type {\n  OperationVariables,\n  TypedDocumentNode,\n} from \"../../core/types.js\";\nimport type { MissingTree } from \"./types/common.js\";\nimport { equalByQuery } from \"../../core/equalByQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { maskFragment } from \"../../masking/index.js\";\nimport type {\n  FragmentType,\n  MaybeMasked,\n  Unmasked,\n} from \"../../masking/index.js\";\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\n/**\n * Watched fragment options.\n */\nexport interface WatchFragmentOptions<TData, TVars> {\n  /**\n   * A GraphQL fragment document parsed into an AST with the `gql`\n   * template literal.\n   *\n   * @docGroup 1. Required options\n   */\n  fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n  /**\n   * An object containing a `__typename` and primary key fields\n   * (such as `id`) identifying the entity object from which the fragment will\n   * be retrieved, or a `{ __ref: \"...\" }` reference, or a `string` ID\n   * (uncommon).\n   *\n   * @docGroup 1. Required options\n   */\n  from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string;\n  /**\n   * Any variables that the GraphQL fragment may depend on.\n   *\n   * @docGroup 2. Cache options\n   */\n  variables?: TVars;\n  /**\n   * The name of the fragment defined in the fragment document.\n   *\n   * Required if the fragment document includes more than one fragment,\n   * optional otherwise.\n   *\n   * @docGroup 2. Cache options\n   */\n  fragmentName?: string;\n  /**\n   * If `true`, `watchFragment` returns optimistic results.\n   *\n   * The default value is `true`.\n   *\n   * @docGroup 2. Cache options\n   */\n  optimistic?: boolean;\n}\n\n/**\n * Watched fragment results.\n */\nexport type WatchFragmentResult<TData> =\n  | {\n      data: MaybeMasked<TData>;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<MaybeMasked<TData>>;\n      complete: false;\n      missing: MissingTree;\n    };\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  public readonly assumeImmutableResults: boolean = false;\n\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>\n  ): Unmasked<TData> | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Data masking API\n\n  // Used by data masking to determine if an inline fragment with a type\n  // condition matches a given typename.\n  //\n  // If not implemented by a cache subclass, data masking will effectively be\n  // disabled since we will not be able to accurately determine if a given type\n  // condition for a union or interface matches a particular type.\n  public fragmentMatches?(\n    fragment: InlineFragmentNode,\n    typename: string\n  ): boolean;\n\n  // Function used to lookup a fragment when a fragment definition is not part\n  // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n  // that register fragments ahead of time so they can be referenced by name.\n  public lookupFragment(fragmentName: string): FragmentDefinitionNode | null {\n    return null;\n  }\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic\n      : options.optimistic === false ? null\n      : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => (updateResult = options.update(this)),\n      optimisticId\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    return false;\n  }\n\n  // DataProxy API\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<QueryType> | null {\n    return this.read({\n      ...options,\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic,\n    });\n  }\n\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n  public watchFragment<TData = any, TVars = OperationVariables>(\n    options: WatchFragmentOptions<TData, TVars>\n  ): Observable<WatchFragmentResult<TData>> {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...otherOptions\n    } = options;\n    const query = this.getFragmentDoc(fragment, fragmentName);\n    // While our TypeScript types do not allow for `undefined` as a valid\n    // `from`, its possible `useFragment` gives us an `undefined` since it\n    // calls` cache.identify` and provides that value to `from`. We are\n    // adding this fix here however to ensure those using plain JavaScript\n    // and using `cache.identify` themselves will avoid seeing the obscure\n    // warning.\n    const id =\n      typeof from === \"undefined\" || typeof from === \"string\" ?\n        from\n      : this.identify(from);\n    const dataMasking = !!(options as any)[Symbol.for(\"apollo.dataMasking\")];\n\n    if (__DEV__) {\n      const actualFragmentName =\n        fragmentName || getFragmentDefinition(fragment).name.value;\n\n      if (!id) {\n        invariant.warn(\n          \"Could not identify object passed to `from` for '%s' fragment, either because the object is non-normalized or the key fields are missing. If you are masking this object, please ensure the key fields are requested by the parent object.\",\n          actualFragmentName\n        );\n      }\n    }\n\n    const diffOptions: Cache.DiffOptions<TData, TVars> = {\n      ...otherOptions,\n      returnPartialData: true,\n      id,\n      query,\n      optimistic,\n    };\n\n    let latestDiff: DataProxy.DiffResult<TData> | undefined;\n\n    return new Observable((observer) => {\n      return this.watch<TData, TVars>({\n        ...diffOptions,\n        immediate: true,\n        callback: (diff) => {\n          const data =\n            dataMasking ?\n              maskFragment(diff.result, fragment, this, fragmentName)\n            : diff.result;\n\n          if (\n            // Always ensure we deliver the first result\n            latestDiff &&\n            equalByQuery(query, { data: latestDiff?.result }, { data })\n          ) {\n            return;\n          }\n\n          const result = {\n            data,\n            complete: !!diff.complete,\n          } as WatchFragmentResult<TData>;\n\n          if (diff.missing) {\n            result.missing = mergeDeepArray(\n              diff.missing.map((error) => error.missing)\n            );\n          }\n\n          latestDiff = { ...diff, result: data };\n          observer.next(result);\n        },\n      });\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument, {\n    max:\n      cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    cache: WeakCache,\n  });\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<FragmentType> | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        dataId: id || \"ROOT_QUERY\",\n        result: data,\n      })\n    );\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        query: this.getFragmentDoc(fragment, fragmentName),\n        dataId: id,\n        result: data,\n      })\n    );\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public getMemoryInternals?: typeof getApolloCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n"]},"metadata":{},"sourceType":"module"}