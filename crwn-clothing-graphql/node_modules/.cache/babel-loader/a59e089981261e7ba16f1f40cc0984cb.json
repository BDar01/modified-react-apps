{"ast":null,"code":"function defaultDispose() {}\n\nexport class StrongCache {\n  constructor() {\n    let max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n    let dispose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDispose;\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  get size() {\n    return this.map.size;\n  }\n\n  getNode(key) {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  set(key, value) {\n    let node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  }\n\n  clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  delete(key) {\n    const node = this.map.get(key);\n\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["defaultDispose","StrongCache","constructor","max","Infinity","dispose","Map","has","key","map","get","node","getNode","value","size","newest","older","newer","oldest","set","clean","delete"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@wry/caches/src/strong.ts"],"sourcesContent":["import type { CommonCache } from \"./common\";\n\ninterface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class StrongCache<K = any, V = any> implements CommonCache<K, V> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  public get size() {\n    return this.map.size;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}