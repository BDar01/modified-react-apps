{"ast":null,"code":"import { invariant, newInvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\"; // Checks the document for errors and throws an exception if there is an error.\n\nexport function checkDocument(doc) {\n  invariant(doc && doc.kind === \"Document\", 88);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== \"FragmentDefinition\";\n  }).map(function (definition) {\n    if (definition.kind !== \"OperationDefinition\") {\n      throw newInvariantError(89, definition.kind);\n    }\n\n    return definition;\n  });\n  invariant(operations.length <= 1, 90, operations.length);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"OperationDefinition\";\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"OperationDefinition\" && !!definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n} // Returns the FragmentDefinitions from a particular document as an array\n\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === \"FragmentDefinition\";\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  invariant(queryDef && queryDef.operation === \"query\", 91);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  invariant(doc.kind === \"Document\", 92);\n  invariant(doc.definitions.length <= 1, 93);\n  var fragmentDef = doc.definitions[0];\n  invariant(fragmentDef.kind === \"FragmentDefinition\", 94);\n  return fragmentDef;\n}\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\n\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === \"OperationDefinition\") {\n      var operation = definition.operation;\n\n      if (operation === \"query\" || operation === \"mutation\" || operation === \"subscription\") {\n        return definition;\n      }\n    }\n\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(95);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}","map":{"version":3,"mappings":"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","names":["invariant","newInvariantError","valueToObjectRepresentation","checkDocument","doc","kind","operations","definitions","filter","d","map","definition","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["/media/rk/disk2/React/crwn-clothing-graphql/node_modules/@apollo/src/utilities/graphql/getFromAST.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode[\"name\"]>;\n};\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  const operations = doc.definitions\n    .filter((d) => d.kind !== \"FragmentDefinition\")\n    .map((definition) => {\n      if (definition.kind !== \"OperationDefinition\") {\n        throw newInvariantError(\n          `Schema type definitions not allowed in queries. Found: \"%s\"`,\n          definition.kind\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains %s operations`,\n    operations.length\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === \"OperationDefinition\"\n  )[0];\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        (definition): definition is OperationDefinitionWithName =>\n          definition.kind === \"OperationDefinition\" && !!definition.name\n      )\n      .map((x) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === \"FragmentDefinition\"\n  );\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === \"query\",\n    \"Must contain a query definition.\"\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    \"Fragment must have exactly one definition.\"\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === \"FragmentDefinition\",\n    \"Must be a fragment definition.\"\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === \"OperationDefinition\") {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === \"query\" ||\n        operation === \"mutation\" ||\n        operation === \"subscription\"\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(\n    \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach((def) => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"]},"metadata":{},"sourceType":"module"}